ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ADC_Init,"ax",%progbits
  18              		.align	2
  19              		.global	ADC_Init
  20              		.code	16
  21              		.thumb_func
  22              		.type	ADC_Init, %function
  23              	ADC_Init:
  24              	.LFB1:
  25              		.file 1 "Generated_Source\\PSoC4\\ADC.c"
   1:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:Generated_Source\PSoC4/ADC.c **** * Version 2.40
   4:Generated_Source\PSoC4/ADC.c **** *
   5:Generated_Source\PSoC4/ADC.c **** * Description:
   6:Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC.c **** *
   9:Generated_Source\PSoC4/ADC.c **** * Note:
  10:Generated_Source\PSoC4/ADC.c **** *
  11:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/ADC.c **** 
  18:Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:Generated_Source\PSoC4/ADC.c **** 
  20:Generated_Source\PSoC4/ADC.c **** 
  21:Generated_Source\PSoC4/ADC.c **** /***************************************
  22:Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:Generated_Source\PSoC4/ADC.c **** 
  28:Generated_Source\PSoC4/ADC.c **** 
  29:Generated_Source\PSoC4/ADC.c **** /***************************************
  30:Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 2


  33:Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000000u };
  34:Generated_Source\PSoC4/ADC.c **** 
  35:Generated_Source\PSoC4/ADC.c **** 
  36:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC.c **** *
  40:Generated_Source\PSoC4/ADC.c **** * Summary:
  41:Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC.c **** *
  45:Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC.c **** *  None.
  47:Generated_Source\PSoC4/ADC.c **** *
  48:Generated_Source\PSoC4/ADC.c **** * Return:
  49:Generated_Source\PSoC4/ADC.c **** *  None.
  50:Generated_Source\PSoC4/ADC.c **** *
  51:Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:Generated_Source\PSoC4/ADC.c **** *
  62:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:Generated_Source\PSoC4/ADC.c **** {
  65:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  67:Generated_Source\PSoC4/ADC.c ****     {
  68:Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  69:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  70:Generated_Source\PSoC4/ADC.c ****     }
  71:Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  72:Generated_Source\PSoC4/ADC.c **** }
  73:Generated_Source\PSoC4/ADC.c **** 
  74:Generated_Source\PSoC4/ADC.c **** 
  75:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC.c **** *
  79:Generated_Source\PSoC4/ADC.c **** * Summary:
  80:Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:Generated_Source\PSoC4/ADC.c **** *
  84:Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:Generated_Source\PSoC4/ADC.c **** *  None.
  86:Generated_Source\PSoC4/ADC.c **** *
  87:Generated_Source\PSoC4/ADC.c **** * Return:
  88:Generated_Source\PSoC4/ADC.c **** *  None.
  89:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 3


  90:Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC.c **** *
  93:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:Generated_Source\PSoC4/ADC.c **** {
  26              		.loc 1 95 0
  27              		.cfi_startproc
  28 0000 08B5     		push	{r3, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 3, -8
  31              		.cfi_offset 14, -4
  96:Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC.c **** 
 100:Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC.c ****         {
 103:Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 4


 141:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/ADC.c ****         };
 168:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/ADC.c **** 
 170:Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  32              		.loc 1 172 0
  33 0002 0E20     		mov	r0, #14
  34 0004 0321     		mov	r1, #3
  35 0006 FFF7FEFF 		bl	CyIntSetPriority
  36              	.LVL0:
 173:Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  37              		.loc 1 173 0
  38 000a 0E20     		mov	r0, #14
  39 000c 2049     		ldr	r1, .L5
  40 000e FFF7FEFF 		bl	CyIntSetVector
  41              	.LVL1:
 174:Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:Generated_Source\PSoC4/ADC.c **** 
 176:Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
  42              		.loc 1 177 0
  43 0012 0122     		mov	r2, #1
  44 0014 1F4B     		ldr	r3, .L5+4
  45 0016 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
  46              		.loc 1 180 0
  47 0018 1F4B     		ldr	r3, .L5+8
  48 001a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 5


 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
  49              		.loc 1 178 0
  50 001c 002B     		cmp	r3, #0
  51 001e 34DB     		blt	.L3
  52 0020 1E49     		ldr	r1, .L5+12
  53              	.L2:
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
  54              		.loc 1 178 0 is_stmt 0 discriminator 4
  55 0022 1F4A     		ldr	r2, .L5+16
 181:Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 186:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 187:Generated_Source\PSoC4/ADC.c ****     
 188:Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 191:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 194:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/ADC.c **** 
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 199:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 200:Generated_Source\PSoC4/ADC.c **** 
 201:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/ADC.c **** 
 205:Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 207:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 208:Generated_Source\PSoC4/ADC.c ****     
 209:Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/ADC.c ****     #else
 216:Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:Generated_Source\PSoC4/ADC.c ****         #else
 220:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 221:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 222:Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/ADC.c ****     
 226:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 227:Generated_Source\PSoC4/ADC.c **** 
 228:Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 6


 229:Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:Generated_Source\PSoC4/ADC.c **** 
 232:Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 233:Generated_Source\PSoC4/ADC.c ****     {
 234:Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 235:Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 237:Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/ADC.c ****         
 239:Generated_Source\PSoC4/ADC.c ****         
 240:Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/ADC.c ****         */
 244:Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:Generated_Source\PSoC4/ADC.c **** 
 249:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/ADC.c ****         {
 253:Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 254:Generated_Source\PSoC4/ADC.c **** 
 255:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 256:Generated_Source\PSoC4/ADC.c ****             {
 257:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 258:Generated_Source\PSoC4/ADC.c ****             }
 259:Generated_Source\PSoC4/ADC.c **** 
 260:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 261:Generated_Source\PSoC4/ADC.c ****             {
 262:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 263:Generated_Source\PSoC4/ADC.c ****             }
 264:Generated_Source\PSoC4/ADC.c ****         }
 265:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/ADC.c ****             else
 267:Generated_Source\PSoC4/ADC.c ****             {
 268:Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:Generated_Source\PSoC4/ADC.c **** 
 270:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/ADC.c ****                 {
 272:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/ADC.c ****                 }
 274:Generated_Source\PSoC4/ADC.c **** 
 275:Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:Generated_Source\PSoC4/ADC.c ****                 {
 277:Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/ADC.c ****                 }
 279:Generated_Source\PSoC4/ADC.c ****             }
 280:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/ADC.c **** 
 282:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 283:Generated_Source\PSoC4/ADC.c ****         {
 284:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 285:Generated_Source\PSoC4/ADC.c ****         }
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 7


 286:Generated_Source\PSoC4/ADC.c ****         else
 287:Generated_Source\PSoC4/ADC.c ****         {
 288:Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 289:Generated_Source\PSoC4/ADC.c ****         }
 290:Generated_Source\PSoC4/ADC.c **** 
 291:Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 292:Generated_Source\PSoC4/ADC.c ****         {
 293:Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/ADC.c ****             #else
 298:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 299:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:Generated_Source\PSoC4/ADC.c ****         }
 301:Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/ADC.c ****         {
 303:Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 306:Generated_Source\PSoC4/ADC.c ****             #else
 307:Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 308:Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:Generated_Source\PSoC4/ADC.c ****         }
 310:Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 312:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 313:Generated_Source\PSoC4/ADC.c ****     }
 314:Generated_Source\PSoC4/ADC.c **** }
  56              		.loc 1 314 0 is_stmt 1 discriminator 4
  57              		@ sp needed
 178:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
  58              		.loc 1 178 0 discriminator 4
  59 0024 1368     		ldr	r3, [r2]
  60 0026 0B43     		orr	r3, r1
  61 0028 1360     		str	r3, [r2]
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
  62              		.loc 1 182 0 discriminator 4
  63 002a 1E4A     		ldr	r2, .L5+20
  64 002c 1E4B     		ldr	r3, .L5+24
 190:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
  65              		.loc 1 190 0 discriminator 4
  66 002e 8021     		mov	r1, #128
 182:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
  67              		.loc 1 182 0 discriminator 4
  68 0030 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
  69              		.loc 1 183 0 discriminator 4
  70 0032 1E4A     		ldr	r2, .L5+28
  71 0034 1E4B     		ldr	r3, .L5+32
 190:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
  72              		.loc 1 190 0 discriminator 4
  73 0036 4902     		lsl	r1, r1, #9
 183:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
  74              		.loc 1 183 0 discriminator 4
  75 0038 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 8


  76              		.loc 1 184 0 discriminator 4
  77 003a 8022     		mov	r2, #128
  78 003c 1D4B     		ldr	r3, .L5+36
  79 003e 1206     		lsl	r2, r2, #24
  80 0040 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
  81              		.loc 1 185 0 discriminator 4
  82 0042 1D4B     		ldr	r3, .L5+40
  83 0044 1D4A     		ldr	r2, .L5+44
  84 0046 1360     		str	r3, [r2]
 186:Generated_Source\PSoC4/ADC.c ****     
  85              		.loc 1 186 0 discriminator 4
  86 0048 1D4A     		ldr	r2, .L5+48
  87 004a 1360     		str	r3, [r2]
 190:Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
  88              		.loc 1 190 0 discriminator 4
  89 004c 1D4A     		ldr	r2, .L5+52
  90 004e 1368     		ldr	r3, [r2]
  91 0050 0B43     		orr	r3, r1
  92 0052 1360     		str	r3, [r2]
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
  93              		.loc 1 197 0 discriminator 4
  94 0054 0022     		mov	r2, #0
 199:Generated_Source\PSoC4/ADC.c **** 
  95              		.loc 1 199 0 discriminator 4
  96 0056 0121     		mov	r1, #1
 197:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
  97              		.loc 1 197 0 discriminator 4
  98 0058 1B4B     		ldr	r3, .L5+56
  99 005a 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 100              		.loc 1 198 0 discriminator 4
 101 005c 1B4B     		ldr	r3, .L5+60
 102 005e 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/ADC.c **** 
 103              		.loc 1 199 0 discriminator 4
 104 0060 1B4B     		ldr	r3, .L5+64
 105 0062 1960     		str	r1, [r3]
 202:Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 106              		.loc 1 202 0 discriminator 4
 107 0064 1B4B     		ldr	r3, .L5+68
 108 0066 0131     		add	r1, r1, #1
 109 0068 1960     		str	r1, [r3]
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 110              		.loc 1 206 0 discriminator 4
 111 006a 1B49     		ldr	r1, .L5+72
 207:Generated_Source\PSoC4/ADC.c ****     
 112              		.loc 1 207 0 discriminator 4
 113 006c 1B4B     		ldr	r3, .L5+76
 206:Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 114              		.loc 1 206 0 discriminator 4
 115 006e 0868     		ldr	r0, [r1]
 116              	.LVL2:
 207:Generated_Source\PSoC4/ADC.c ****     
 117              		.loc 1 207 0 discriminator 4
 118 0070 0340     		and	r3, r0
 119              	.LVL3:
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 9


 211:Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 120              		.loc 1 211 0 discriminator 4
 121 0072 C020     		mov	r0, #192
 122 0074 8004     		lsl	r0, r0, #18
 123 0076 0343     		orr	r3, r0
 124              	.LVL4:
 226:Generated_Source\PSoC4/ADC.c **** 
 125              		.loc 1 226 0 discriminator 4
 126 0078 0B60     		str	r3, [r1]
 127              	.LVL5:
 253:Generated_Source\PSoC4/ADC.c **** 
 128              		.loc 1 253 0 discriminator 4
 129 007a 194B     		ldr	r3, .L5+80
 130 007c 1A60     		str	r2, [r3]
 131              	.LVL6:
 298:Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 132              		.loc 1 298 0 discriminator 4
 133 007e 194B     		ldr	r3, .L5+84
 134 0080 1A80     		strh	r2, [r3]
 311:Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 135              		.loc 1 311 0 discriminator 4
 136 0082 194A     		ldr	r2, .L5+88
 137 0084 194B     		ldr	r3, .L5+92
 138 0086 1A60     		str	r2, [r3]
 139              	.LVL7:
 140              		.loc 1 314 0 discriminator 4
 141 0088 08BD     		pop	{r3, pc}
 142              	.LVL8:
 143              	.L3:
 178:Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 144              		.loc 1 178 0
 145 008a 1949     		ldr	r1, .L5+96
 146 008c C9E7     		b	.L2
 147              	.L6:
 148 008e C046     		.align	2
 149              	.L5:
 150 0090 00000000 		.word	ADC_ISR
 151 0094 20001A40 		.word	1075445792
 152 0098 80031A40 		.word	1075446656
 153 009c C0020050 		.word	1342177984
 154 00a0 00001A40 		.word	1075445760
 155 00a4 AC000A80 		.word	-2146828116
 156 00a8 04001A40 		.word	1075445764
 157 00ac 0000DC05 		.word	98304000
 158 00b0 18001A40 		.word	1075445784
 159 00b4 1C001A40 		.word	1075445788
 160 00b8 04000400 		.word	262148
 161 00bc 10001A40 		.word	1075445776
 162 00c0 14001A40 		.word	1075445780
 163 00c4 00031A40 		.word	1075446528
 164 00c8 28021A40 		.word	1075446312
 165 00cc 38021A40 		.word	1075446328
 166 00d0 18021A40 		.word	1075446296
 167 00d4 000F1A40 		.word	1075449600
 168 00d8 30001A40 		.word	1075445808
 169 00dc FFFFFFDF 		.word	-536870913
 170 00e0 80001A40 		.word	1075445888
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 10


 171 00e4 00000000 		.word	ADC_offset
 172 00e8 204E0000 		.word	20000
 173 00ec 00000000 		.word	ADC_countsPer10Volt
 174 00f0 C0021050 		.word	1343226560
 175              		.cfi_endproc
 176              	.LFE1:
 177              		.size	ADC_Init, .-ADC_Init
 178              		.section	.text.ADC_Start,"ax",%progbits
 179              		.align	2
 180              		.global	ADC_Start
 181              		.code	16
 182              		.thumb_func
 183              		.type	ADC_Start, %function
 184              	ADC_Start:
 185              	.LFB0:
  64:Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
 186              		.loc 1 64 0
 187              		.cfi_startproc
 188 0000 10B5     		push	{r4, lr}
 189              		.cfi_def_cfa_offset 8
 190              		.cfi_offset 4, -8
 191              		.cfi_offset 14, -4
  66:Generated_Source\PSoC4/ADC.c ****     {
 192              		.loc 1 66 0
 193 0002 0B4C     		ldr	r4, .L11
 194 0004 2378     		ldrb	r3, [r4]
 195 0006 002B     		cmp	r3, #0
 196 0008 0CD0     		beq	.L10
 197              	.L8:
 198              	.LBB8:
 199              	.LBB9:
 315:Generated_Source\PSoC4/ADC.c **** 
 316:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:Generated_Source\PSoC4/ADC.c **** *
 320:Generated_Source\PSoC4/ADC.c **** * Summary:
 321:Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/ADC.c **** *
 323:Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:Generated_Source\PSoC4/ADC.c **** *  None.
 325:Generated_Source\PSoC4/ADC.c **** *
 326:Generated_Source\PSoC4/ADC.c **** * Return:
 327:Generated_Source\PSoC4/ADC.c **** *  None.
 328:Generated_Source\PSoC4/ADC.c **** *
 329:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:Generated_Source\PSoC4/ADC.c **** {
 332:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 200              		.loc 1 332 0
 201 000a 0A4B     		ldr	r3, .L11+4
 202 000c 1A68     		ldr	r2, [r3]
 203 000e 002A     		cmp	r2, #0
 204 0010 07DB     		blt	.L7
 205              	.LBB10:
 206              	.LBB11:
 333:Generated_Source\PSoC4/ADC.c ****     {
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 11


 334:Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/ADC.c **** 
 336:Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 337:Generated_Source\PSoC4/ADC.c ****             {
 338:Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/ADC.c ****             }
 340:Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:Generated_Source\PSoC4/ADC.c ****         
 342:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 207              		.loc 1 342 0
 208 0012 8021     		mov	r1, #128
 209 0014 1A68     		ldr	r2, [r3]
 210 0016 0906     		lsl	r1, r1, #24
 211 0018 0A43     		orr	r2, r1
 212 001a 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/ADC.c ****         
 344:Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 213              		.loc 1 345 0
 214 001c 0A20     		mov	r0, #10
 215 001e FFF7FEFF 		bl	CyDelayUs
 216              	.LVL9:
 217              	.L7:
 218              	.LBE11:
 219              	.LBE10:
 220              	.LBE9:
 221              	.LBE8:
  72:Generated_Source\PSoC4/ADC.c **** 
 222              		.loc 1 72 0
 223              		@ sp needed
 224 0022 10BD     		pop	{r4, pc}
 225              	.L10:
  68:Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
 226              		.loc 1 68 0
 227 0024 FFF7FEFF 		bl	ADC_Init
 228              	.LVL10:
  69:Generated_Source\PSoC4/ADC.c ****     }
 229              		.loc 1 69 0
 230 0028 0123     		mov	r3, #1
 231 002a 2370     		strb	r3, [r4]
 232 002c EDE7     		b	.L8
 233              	.L12:
 234 002e C046     		.align	2
 235              	.L11:
 236 0030 00000000 		.word	.LANCHOR0
 237 0034 00001A40 		.word	1075445760
 238              		.cfi_endproc
 239              	.LFE0:
 240              		.size	ADC_Start, .-ADC_Start
 241              		.section	.text.ADC_Enable,"ax",%progbits
 242              		.align	2
 243              		.global	ADC_Enable
 244              		.code	16
 245              		.thumb_func
 246              		.type	ADC_Enable, %function
 247              	ADC_Enable:
 248              	.LFB2:
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 12


 331:Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 249              		.loc 1 331 0
 250              		.cfi_startproc
 251 0000 08B5     		push	{r3, lr}
 252              		.cfi_def_cfa_offset 8
 253              		.cfi_offset 3, -8
 254              		.cfi_offset 14, -4
 332:Generated_Source\PSoC4/ADC.c ****     {
 255              		.loc 1 332 0
 256 0002 064B     		ldr	r3, .L15
 257 0004 1A68     		ldr	r2, [r3]
 258 0006 002A     		cmp	r2, #0
 259 0008 07DB     		blt	.L13
 260              	.LBB14:
 261              	.LBB15:
 342:Generated_Source\PSoC4/ADC.c ****         
 262              		.loc 1 342 0
 263 000a 8021     		mov	r1, #128
 264 000c 1A68     		ldr	r2, [r3]
 265 000e 0906     		lsl	r1, r1, #24
 266 0010 0A43     		orr	r2, r1
 267 0012 1A60     		str	r2, [r3]
 268              		.loc 1 345 0
 269 0014 0A20     		mov	r0, #10
 270 0016 FFF7FEFF 		bl	CyDelayUs
 271              	.LVL11:
 272              	.L13:
 273              	.LBE15:
 274              	.LBE14:
 346:Generated_Source\PSoC4/ADC.c ****     }
 347:Generated_Source\PSoC4/ADC.c **** }
 275              		.loc 1 347 0
 276              		@ sp needed
 277 001a 08BD     		pop	{r3, pc}
 278              	.L16:
 279              		.align	2
 280              	.L15:
 281 001c 00001A40 		.word	1075445760
 282              		.cfi_endproc
 283              	.LFE2:
 284              		.size	ADC_Enable, .-ADC_Enable
 285              		.section	.text.ADC_Stop,"ax",%progbits
 286              		.align	2
 287              		.global	ADC_Stop
 288              		.code	16
 289              		.thumb_func
 290              		.type	ADC_Stop, %function
 291              	ADC_Stop:
 292              	.LFB3:
 348:Generated_Source\PSoC4/ADC.c **** 
 349:Generated_Source\PSoC4/ADC.c **** 
 350:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:Generated_Source\PSoC4/ADC.c **** *
 354:Generated_Source\PSoC4/ADC.c **** * Summary:
 355:Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 13


 356:Generated_Source\PSoC4/ADC.c **** *  mode.
 357:Generated_Source\PSoC4/ADC.c **** *
 358:Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:Generated_Source\PSoC4/ADC.c **** *  None.
 360:Generated_Source\PSoC4/ADC.c **** *
 361:Generated_Source\PSoC4/ADC.c **** * Return:
 362:Generated_Source\PSoC4/ADC.c **** *  None.
 363:Generated_Source\PSoC4/ADC.c **** *
 364:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:Generated_Source\PSoC4/ADC.c **** {
 293              		.loc 1 366 0
 294              		.cfi_startproc
 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 295              		.loc 1 367 0
 296 0000 024A     		ldr	r2, .L18
 368:Generated_Source\PSoC4/ADC.c **** }
 297              		.loc 1 368 0
 298              		@ sp needed
 367:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 299              		.loc 1 367 0
 300 0002 1368     		ldr	r3, [r2]
 301 0004 5B00     		lsl	r3, r3, #1
 302 0006 5B08     		lsr	r3, r3, #1
 303 0008 1360     		str	r3, [r2]
 304              		.loc 1 368 0
 305 000a 7047     		bx	lr
 306              	.L19:
 307              		.align	2
 308              	.L18:
 309 000c 00001A40 		.word	1075445760
 310              		.cfi_endproc
 311              	.LFE3:
 312              		.size	ADC_Stop, .-ADC_Stop
 313              		.section	.text.ADC_StartConvert,"ax",%progbits
 314              		.align	2
 315              		.global	ADC_StartConvert
 316              		.code	16
 317              		.thumb_func
 318              		.type	ADC_StartConvert, %function
 319              	ADC_StartConvert:
 320              	.LFB4:
 369:Generated_Source\PSoC4/ADC.c **** 
 370:Generated_Source\PSoC4/ADC.c **** 
 371:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:Generated_Source\PSoC4/ADC.c **** *
 375:Generated_Source\PSoC4/ADC.c **** * Summary:
 376:Generated_Source\PSoC4/ADC.c **** *  Description:
 377:Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:Generated_Source\PSoC4/ADC.c **** *
 380:Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 14


 384:Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:Generated_Source\PSoC4/ADC.c **** *  None.
 386:Generated_Source\PSoC4/ADC.c **** *
 387:Generated_Source\PSoC4/ADC.c **** * Return:
 388:Generated_Source\PSoC4/ADC.c **** *  None.
 389:Generated_Source\PSoC4/ADC.c **** *
 390:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:Generated_Source\PSoC4/ADC.c **** {
 321              		.loc 1 392 0
 322              		.cfi_startproc
 393:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 395:Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 323              		.loc 1 396 0
 324 0000 0122     		mov	r2, #1
 325 0002 014B     		ldr	r3, .L21
 397:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:Generated_Source\PSoC4/ADC.c **** 
 399:Generated_Source\PSoC4/ADC.c **** }
 326              		.loc 1 399 0
 327              		@ sp needed
 396:Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 328              		.loc 1 396 0
 329 0004 1A60     		str	r2, [r3]
 330              		.loc 1 399 0
 331 0006 7047     		bx	lr
 332              	.L22:
 333              		.align	2
 334              	.L21:
 335 0008 24001A40 		.word	1075445796
 336              		.cfi_endproc
 337              	.LFE4:
 338              		.size	ADC_StartConvert, .-ADC_StartConvert
 339              		.section	.text.ADC_StopConvert,"ax",%progbits
 340              		.align	2
 341              		.global	ADC_StopConvert
 342              		.code	16
 343              		.thumb_func
 344              		.type	ADC_StopConvert, %function
 345              	ADC_StopConvert:
 346              	.LFB5:
 400:Generated_Source\PSoC4/ADC.c **** 
 401:Generated_Source\PSoC4/ADC.c **** 
 402:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:Generated_Source\PSoC4/ADC.c **** *
 406:Generated_Source\PSoC4/ADC.c **** * Summary:
 407:Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/ADC.c **** *
 409:Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:Generated_Source\PSoC4/ADC.c **** *  None.
 411:Generated_Source\PSoC4/ADC.c **** *
 412:Generated_Source\PSoC4/ADC.c **** * Return:
 413:Generated_Source\PSoC4/ADC.c **** *  None.
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 15


 414:Generated_Source\PSoC4/ADC.c **** *
 415:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:Generated_Source\PSoC4/ADC.c **** {
 347              		.loc 1 417 0
 348              		.cfi_startproc
 418:Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 420:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:Generated_Source\PSoC4/ADC.c **** }
 349              		.loc 1 421 0
 350              		@ sp needed
 351 0000 7047     		bx	lr
 352              		.cfi_endproc
 353              	.LFE5:
 354              		.size	ADC_StopConvert, .-ADC_StopConvert
 355 0002 C046     		.section	.text.ADC_IsEndConversion,"ax",%progbits
 356              		.align	2
 357              		.global	ADC_IsEndConversion
 358              		.code	16
 359              		.thumb_func
 360              		.type	ADC_IsEndConversion, %function
 361              	ADC_IsEndConversion:
 362              	.LFB6:
 422:Generated_Source\PSoC4/ADC.c **** 
 423:Generated_Source\PSoC4/ADC.c **** 
 424:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:Generated_Source\PSoC4/ADC.c **** *
 428:Generated_Source\PSoC4/ADC.c **** * Summary:
 429:Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/ADC.c **** *  completed.
 436:Generated_Source\PSoC4/ADC.c **** *
 437:Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:Generated_Source\PSoC4/ADC.c **** *
 445:Generated_Source\PSoC4/ADC.c **** * Return:
 446:Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/ADC.c **** *
 449:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/ADC.c **** {
 363              		.loc 1 451 0
 364              		.cfi_startproc
 365              	.LVL12:
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 16


 452:Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 366              		.loc 1 452 0
 367 0000 0023     		mov	r3, #0
 453:Generated_Source\PSoC4/ADC.c **** 
 454:Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 368              		.loc 1 454 0
 369 0002 8207     		lsl	r2, r0, #30
 370 0004 0DD0     		beq	.L29
 455:Generated_Source\PSoC4/ADC.c ****     {
 456:Generated_Source\PSoC4/ADC.c ****         do
 457:Generated_Source\PSoC4/ADC.c ****         {
 458:Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 459:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 371              		.loc 1 459 0 discriminator 2
 372 0006 0233     		add	r3, r3, #2
 458:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 373              		.loc 1 458 0 discriminator 2
 374 0008 0749     		ldr	r1, .L34
 375 000a 0122     		mov	r2, #1
 376              		.loc 1 459 0 discriminator 2
 377 000c 1840     		and	r0, r3
 378              	.LVL13:
 379 000e 01E0     		b	.L30
 380              	.LVL14:
 381              	.L33:
 382              		.loc 1 459 0 is_stmt 0 discriminator 1
 383 0010 0028     		cmp	r0, #0
 384 0012 06D0     		beq	.L29
 385              	.LVL15:
 386              	.L30:
 458:Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 387              		.loc 1 458 0 is_stmt 1 discriminator 2
 388 0014 0B68     		ldr	r3, [r1]
 389 0016 1340     		and	r3, r2
 390              	.LVL16:
 391              		.loc 1 459 0 discriminator 2
 392 0018 FAD0     		beq	.L33
 460:Generated_Source\PSoC4/ADC.c **** 
 461:Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 462:Generated_Source\PSoC4/ADC.c ****         {
 463:Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 393              		.loc 1 464 0
 394 001a 0122     		mov	r2, #1
 395 001c 024B     		ldr	r3, .L34
 396              	.LVL17:
 397 001e 1A60     		str	r2, [r3]
 398 0020 0123     		mov	r3, #1
 399              	.LVL18:
 400              	.L29:
 465:Generated_Source\PSoC4/ADC.c ****         }
 466:Generated_Source\PSoC4/ADC.c ****     }
 467:Generated_Source\PSoC4/ADC.c **** 
 468:Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/ADC.c ****         {
 471:Generated_Source\PSoC4/ADC.c ****             do
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 17


 472:Generated_Source\PSoC4/ADC.c ****             {
 473:Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/ADC.c **** 
 477:Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/ADC.c ****             {
 479:Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/ADC.c ****             }
 482:Generated_Source\PSoC4/ADC.c ****         }
 483:Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/ADC.c **** 
 485:Generated_Source\PSoC4/ADC.c ****     return (status);
 486:Generated_Source\PSoC4/ADC.c **** }
 401              		.loc 1 486 0
 402 0022 181C     		mov	r0, r3
 403              		@ sp needed
 404 0024 7047     		bx	lr
 405              	.L35:
 406 0026 C046     		.align	2
 407              	.L34:
 408 0028 10021A40 		.word	1075446288
 409              		.cfi_endproc
 410              	.LFE6:
 411              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 412              		.section	.text.ADC_GetResult16,"ax",%progbits
 413              		.align	2
 414              		.global	ADC_GetResult16
 415              		.code	16
 416              		.thumb_func
 417              		.type	ADC_GetResult16, %function
 418              	ADC_GetResult16:
 419              	.LFB7:
 487:Generated_Source\PSoC4/ADC.c **** 
 488:Generated_Source\PSoC4/ADC.c **** 
 489:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:Generated_Source\PSoC4/ADC.c **** *
 493:Generated_Source\PSoC4/ADC.c **** * Summary:
 494:Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/ADC.c **** *
 496:Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/ADC.c **** *
 500:Generated_Source\PSoC4/ADC.c **** * Return:
 501:Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/ADC.c **** *
 503:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/ADC.c **** {
 420              		.loc 1 505 0
 421              		.cfi_startproc
 422              	.LVL19:
 423 0000 08B5     		push	{r3, lr}
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 18


 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 3, -8
 426              		.cfi_offset 14, -4
 506:Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:Generated_Source\PSoC4/ADC.c **** 
 508:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 427              		.loc 1 509 0
 428 0002 0028     		cmp	r0, #0
 429 0004 04D1     		bne	.L40
 510:Generated_Source\PSoC4/ADC.c **** 
 511:Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 512:Generated_Source\PSoC4/ADC.c ****     {
 513:Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 430              		.loc 1 513 0
 431 0006 054B     		ldr	r3, .L41
 432 0008 1868     		ldr	r0, [r3]
 433              	.LVL20:
 434 000a 80B2     		uxth	r0, r0
 435              	.LVL21:
 436              	.L38:
 514:Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:Generated_Source\PSoC4/ADC.c ****     }
 516:Generated_Source\PSoC4/ADC.c ****     else
 517:Generated_Source\PSoC4/ADC.c ****     {
 518:Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:Generated_Source\PSoC4/ADC.c ****         #else
 521:Generated_Source\PSoC4/ADC.c ****             result = 0u;
 522:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/ADC.c ****     }
 524:Generated_Source\PSoC4/ADC.c **** 
 525:Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 437              		.loc 1 525 0
 438 000c 00B2     		sxth	r0, r0
 526:Generated_Source\PSoC4/ADC.c **** }
 439              		.loc 1 526 0
 440              		@ sp needed
 441 000e 08BD     		pop	{r3, pc}
 442              	.LVL22:
 443              	.L40:
 509:Generated_Source\PSoC4/ADC.c **** 
 444              		.loc 1 509 0 discriminator 1
 445 0010 0020     		mov	r0, #0
 446              	.LVL23:
 447 0012 FFF7FEFF 		bl	CyHalt
 448              	.LVL24:
 449 0016 0020     		mov	r0, #0
 450 0018 F8E7     		b	.L38
 451              	.L42:
 452 001a C046     		.align	2
 453              	.L41:
 454 001c 80011A40 		.word	1075446144
 455              		.cfi_endproc
 456              	.LFE7:
 457              		.size	ADC_GetResult16, .-ADC_GetResult16
 458              		.section	.text.ADC_SetChanMask,"ax",%progbits
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 19


 459              		.align	2
 460              		.global	ADC_SetChanMask
 461              		.code	16
 462              		.thumb_func
 463              		.type	ADC_SetChanMask, %function
 464              	ADC_SetChanMask:
 465              	.LFB8:
 527:Generated_Source\PSoC4/ADC.c **** 
 528:Generated_Source\PSoC4/ADC.c **** 
 529:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:Generated_Source\PSoC4/ADC.c **** *
 533:Generated_Source\PSoC4/ADC.c **** * Summary:
 534:Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/ADC.c **** *
 536:Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/ADC.c **** *
 545:Generated_Source\PSoC4/ADC.c **** * Return:
 546:Generated_Source\PSoC4/ADC.c **** *  None.
 547:Generated_Source\PSoC4/ADC.c **** *
 548:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/ADC.c **** {
 466              		.loc 1 550 0
 467              		.cfi_startproc
 468              	.LVL25:
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 469              		.loc 1 551 0
 470 0000 0123     		mov	r3, #1
 471 0002 1840     		and	r0, r3
 472              	.LVL26:
 473 0004 014B     		ldr	r3, .L44
 552:Generated_Source\PSoC4/ADC.c **** }
 474              		.loc 1 552 0
 475              		@ sp needed
 551:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 476              		.loc 1 551 0
 477 0006 1860     		str	r0, [r3]
 478              		.loc 1 552 0
 479 0008 7047     		bx	lr
 480              	.L45:
 481 000a C046     		.align	2
 482              	.L44:
 483 000c 20001A40 		.word	1075445792
 484              		.cfi_endproc
 485              	.LFE8:
 486              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 487              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 488              		.align	2
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 20


 489              		.global	ADC_SetLowLimit
 490              		.code	16
 491              		.thumb_func
 492              		.type	ADC_SetLowLimit, %function
 493              	ADC_SetLowLimit:
 494              	.LFB9:
 553:Generated_Source\PSoC4/ADC.c **** 
 554:Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/ADC.c **** 
 556:Generated_Source\PSoC4/ADC.c **** 
 557:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/ADC.c ****     *
 561:Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/ADC.c ****     *
 564:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:Generated_Source\PSoC4/ADC.c ****     *  None.
 566:Generated_Source\PSoC4/ADC.c ****     *
 567:Generated_Source\PSoC4/ADC.c ****     * Return:
 568:Generated_Source\PSoC4/ADC.c ****     *  None.
 569:Generated_Source\PSoC4/ADC.c ****     *
 570:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:Generated_Source\PSoC4/ADC.c ****     {
 573:Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/ADC.c ****     }
 575:Generated_Source\PSoC4/ADC.c **** 
 576:Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/ADC.c **** 
 578:Generated_Source\PSoC4/ADC.c **** 
 579:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:Generated_Source\PSoC4/ADC.c **** *
 583:Generated_Source\PSoC4/ADC.c **** * Summary:
 584:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/ADC.c **** *
 586:Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/ADC.c **** *
 589:Generated_Source\PSoC4/ADC.c **** * Return:
 590:Generated_Source\PSoC4/ADC.c **** *  None.
 591:Generated_Source\PSoC4/ADC.c **** *
 592:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/ADC.c **** {
 495              		.loc 1 594 0
 496              		.cfi_startproc
 497              	.LVL27:
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 498              		.loc 1 595 0
 499 0000 054A     		ldr	r2, .L47
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 500              		.loc 1 596 0
 501 0002 0004     		lsl	r0, r0, #16
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 21


 502              	.LVL28:
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 503              		.loc 1 595 0
 504 0004 1368     		ldr	r3, [r2]
 505              		.loc 1 596 0
 506 0006 000C     		lsr	r0, r0, #16
 595:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 507              		.loc 1 595 0
 508 0008 1B0C     		lsr	r3, r3, #16
 509 000a 1B04     		lsl	r3, r3, #16
 510 000c 1360     		str	r3, [r2]
 511              		.loc 1 596 0
 512 000e 1368     		ldr	r3, [r2]
 597:Generated_Source\PSoC4/ADC.c **** }
 513              		.loc 1 597 0
 514              		@ sp needed
 596:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 515              		.loc 1 596 0
 516 0010 1843     		orr	r0, r3
 517 0012 1060     		str	r0, [r2]
 518              		.loc 1 597 0
 519 0014 7047     		bx	lr
 520              	.L48:
 521 0016 C046     		.align	2
 522              	.L47:
 523 0018 18001A40 		.word	1075445784
 524              		.cfi_endproc
 525              	.LFE9:
 526              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 527              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 528              		.align	2
 529              		.global	ADC_SetHighLimit
 530              		.code	16
 531              		.thumb_func
 532              		.type	ADC_SetHighLimit, %function
 533              	ADC_SetHighLimit:
 534              	.LFB10:
 598:Generated_Source\PSoC4/ADC.c **** 
 599:Generated_Source\PSoC4/ADC.c **** 
 600:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:Generated_Source\PSoC4/ADC.c **** *
 604:Generated_Source\PSoC4/ADC.c **** * Summary:
 605:Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/ADC.c **** *
 607:Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/ADC.c **** *
 610:Generated_Source\PSoC4/ADC.c **** * Return:
 611:Generated_Source\PSoC4/ADC.c **** *  None.
 612:Generated_Source\PSoC4/ADC.c **** *
 613:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/ADC.c **** {
 535              		.loc 1 615 0
 536              		.cfi_startproc
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 22


 537              	.LVL29:
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 538              		.loc 1 616 0
 539 0000 044A     		ldr	r2, .L50
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 540              		.loc 1 617 0
 541 0002 0004     		lsl	r0, r0, #16
 542              	.LVL30:
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 543              		.loc 1 616 0
 544 0004 1368     		ldr	r3, [r2]
 618:Generated_Source\PSoC4/ADC.c **** }
 545              		.loc 1 618 0
 546              		@ sp needed
 616:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 547              		.loc 1 616 0
 548 0006 1B04     		lsl	r3, r3, #16
 549 0008 1B0C     		lsr	r3, r3, #16
 550 000a 1360     		str	r3, [r2]
 617:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 551              		.loc 1 617 0
 552 000c 1368     		ldr	r3, [r2]
 553 000e 1843     		orr	r0, r3
 554 0010 1060     		str	r0, [r2]
 555              		.loc 1 618 0
 556 0012 7047     		bx	lr
 557              	.L51:
 558              		.align	2
 559              	.L50:
 560 0014 18001A40 		.word	1075445784
 561              		.cfi_endproc
 562              	.LFE10:
 563              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 564              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 565              		.align	2
 566              		.global	ADC_SetLimitMask
 567              		.code	16
 568              		.thumb_func
 569              		.type	ADC_SetLimitMask, %function
 570              	ADC_SetLimitMask:
 571              	.LFB11:
 619:Generated_Source\PSoC4/ADC.c **** 
 620:Generated_Source\PSoC4/ADC.c **** 
 621:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC.c **** *
 625:Generated_Source\PSoC4/ADC.c **** * Summary:
 626:Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/ADC.c **** *
 628:Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/ADC.c **** *
 634:Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 23


 635:Generated_Source\PSoC4/ADC.c **** *  None.
 636:Generated_Source\PSoC4/ADC.c **** *
 637:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/ADC.c **** {
 572              		.loc 1 639 0
 573              		.cfi_startproc
 574              	.LVL31:
 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 575              		.loc 1 640 0
 576 0000 0123     		mov	r3, #1
 577 0002 1840     		and	r0, r3
 578              	.LVL32:
 579 0004 014B     		ldr	r3, .L53
 641:Generated_Source\PSoC4/ADC.c **** }
 580              		.loc 1 641 0
 581              		@ sp needed
 640:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 582              		.loc 1 640 0
 583 0006 1860     		str	r0, [r3]
 584              		.loc 1 641 0
 585 0008 7047     		bx	lr
 586              	.L54:
 587 000a C046     		.align	2
 588              	.L53:
 589 000c 38021A40 		.word	1075446328
 590              		.cfi_endproc
 591              	.LFE11:
 592              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 593              		.section	.text.ADC_SetSatMask,"ax",%progbits
 594              		.align	2
 595              		.global	ADC_SetSatMask
 596              		.code	16
 597              		.thumb_func
 598              		.type	ADC_SetSatMask, %function
 599              	ADC_SetSatMask:
 600              	.LFB12:
 642:Generated_Source\PSoC4/ADC.c **** 
 643:Generated_Source\PSoC4/ADC.c **** 
 644:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:Generated_Source\PSoC4/ADC.c **** *
 648:Generated_Source\PSoC4/ADC.c **** * Summary:
 649:Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/ADC.c **** *
 651:Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/ADC.c **** *
 657:Generated_Source\PSoC4/ADC.c **** * Return:
 658:Generated_Source\PSoC4/ADC.c **** *  None.
 659:Generated_Source\PSoC4/ADC.c **** *
 660:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 24


 662:Generated_Source\PSoC4/ADC.c **** {
 601              		.loc 1 662 0
 602              		.cfi_startproc
 603              	.LVL33:
 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 604              		.loc 1 663 0
 605 0000 0123     		mov	r3, #1
 606 0002 1840     		and	r0, r3
 607              	.LVL34:
 608 0004 014B     		ldr	r3, .L56
 664:Generated_Source\PSoC4/ADC.c **** }
 609              		.loc 1 664 0
 610              		@ sp needed
 663:Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 611              		.loc 1 663 0
 612 0006 1860     		str	r0, [r3]
 613              		.loc 1 664 0
 614 0008 7047     		bx	lr
 615              	.L57:
 616 000a C046     		.align	2
 617              	.L56:
 618 000c 28021A40 		.word	1075446312
 619              		.cfi_endproc
 620              	.LFE12:
 621              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 622              		.section	.text.ADC_SetOffset,"ax",%progbits
 623              		.align	2
 624              		.global	ADC_SetOffset
 625              		.code	16
 626              		.thumb_func
 627              		.type	ADC_SetOffset, %function
 628              	ADC_SetOffset:
 629              	.LFB13:
 665:Generated_Source\PSoC4/ADC.c **** 
 666:Generated_Source\PSoC4/ADC.c **** 
 667:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:Generated_Source\PSoC4/ADC.c **** *
 671:Generated_Source\PSoC4/ADC.c **** * Summary:
 672:Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/ADC.c **** *
 677:Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/ADC.c **** *
 682:Generated_Source\PSoC4/ADC.c **** * Return:
 683:Generated_Source\PSoC4/ADC.c **** *  None.
 684:Generated_Source\PSoC4/ADC.c **** *
 685:Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/ADC.c **** *
 688:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 25


 689:Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/ADC.c **** {
 630              		.loc 1 690 0
 631              		.cfi_startproc
 632              	.LVL35:
 633 0000 38B5     		push	{r3, r4, r5, lr}
 634              		.cfi_def_cfa_offset 16
 635              		.cfi_offset 3, -16
 636              		.cfi_offset 4, -12
 637              		.cfi_offset 5, -8
 638              		.cfi_offset 14, -4
 639              		.loc 1 690 0
 640 0002 041C     		mov	r4, r0
 641 0004 0D1C     		mov	r5, r1
 691:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 642              		.loc 1 692 0
 643 0006 0028     		cmp	r0, #0
 644 0008 02D0     		beq	.L59
 645              		.loc 1 692 0 is_stmt 0 discriminator 1
 646 000a 0020     		mov	r0, #0
 647              	.LVL36:
 648 000c FFF7FEFF 		bl	CyHalt
 649              	.LVL37:
 650              	.L59:
 693:Generated_Source\PSoC4/ADC.c **** 
 694:Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 651              		.loc 1 694 0 is_stmt 1
 652 0010 014B     		ldr	r3, .L63
 653 0012 6400     		lsl	r4, r4, #1
 654              	.LVL38:
 655 0014 E552     		strh	r5, [r4, r3]
 695:Generated_Source\PSoC4/ADC.c **** }
 656              		.loc 1 695 0
 657              		@ sp needed
 658 0016 38BD     		pop	{r3, r4, r5, pc}
 659              	.L64:
 660              		.align	2
 661              	.L63:
 662 0018 00000000 		.word	ADC_offset
 663              		.cfi_endproc
 664              	.LFE13:
 665              		.size	ADC_SetOffset, .-ADC_SetOffset
 666              		.section	.text.ADC_SetGain,"ax",%progbits
 667              		.align	2
 668              		.global	ADC_SetGain
 669              		.code	16
 670              		.thumb_func
 671              		.type	ADC_SetGain, %function
 672              	ADC_SetGain:
 673              	.LFB14:
 696:Generated_Source\PSoC4/ADC.c **** 
 697:Generated_Source\PSoC4/ADC.c **** 
 698:Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 26


 702:Generated_Source\PSoC4/ADC.c **** * Summary:
 703:Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/ADC.c **** *
 711:Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/ADC.c **** *
 715:Generated_Source\PSoC4/ADC.c **** * Return:
 716:Generated_Source\PSoC4/ADC.c **** *  None.
 717:Generated_Source\PSoC4/ADC.c **** *
 718:Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/ADC.c **** *
 722:Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/ADC.c **** {
 674              		.loc 1 724 0
 675              		.cfi_startproc
 676              	.LVL39:
 677 0000 38B5     		push	{r3, r4, r5, lr}
 678              		.cfi_def_cfa_offset 16
 679              		.cfi_offset 3, -16
 680              		.cfi_offset 4, -12
 681              		.cfi_offset 5, -8
 682              		.cfi_offset 14, -4
 683              		.loc 1 724 0
 684 0002 041C     		mov	r4, r0
 685 0004 0D1C     		mov	r5, r1
 725:Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 686              		.loc 1 726 0
 687 0006 0028     		cmp	r0, #0
 688 0008 02D0     		beq	.L66
 689              		.loc 1 726 0 is_stmt 0 discriminator 1
 690 000a 0020     		mov	r0, #0
 691              	.LVL40:
 692 000c FFF7FEFF 		bl	CyHalt
 693              	.LVL41:
 694              	.L66:
 727:Generated_Source\PSoC4/ADC.c **** 
 728:Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 695              		.loc 1 728 0 is_stmt 1
 696 0010 014B     		ldr	r3, .L70
 697 0012 A400     		lsl	r4, r4, #2
 698              	.LVL42:
 699 0014 E550     		str	r5, [r4, r3]
 729:Generated_Source\PSoC4/ADC.c **** }
 700              		.loc 1 729 0
 701              		@ sp needed
 702              	.LVL43:
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 27


 703 0016 38BD     		pop	{r3, r4, r5, pc}
 704              	.L71:
 705              		.align	2
 706              	.L70:
 707 0018 00000000 		.word	ADC_countsPer10Volt
 708              		.cfi_endproc
 709              	.LFE14:
 710              		.size	ADC_SetGain, .-ADC_SetGain
 711              		.global	__aeabi_idiv
 712              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 713              		.align	2
 714              		.global	ADC_CountsTo_mVolts
 715              		.code	16
 716              		.thumb_func
 717              		.type	ADC_CountsTo_mVolts, %function
 718              	ADC_CountsTo_mVolts:
 719              	.LFB15:
 730:Generated_Source\PSoC4/ADC.c **** 
 731:Generated_Source\PSoC4/ADC.c **** 
 732:Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:Generated_Source\PSoC4/ADC.c **** 
 734:Generated_Source\PSoC4/ADC.c **** 
 735:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/ADC.c ****     *
 739:Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/ADC.c ****     *
 743:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/ADC.c ****     *
 747:Generated_Source\PSoC4/ADC.c ****     * Return:
 748:Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/ADC.c ****     *
 750:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/ADC.c ****     *
 755:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/ADC.c ****     {
 720              		.loc 1 757 0
 721              		.cfi_startproc
 722              	.LVL44:
 723 0000 38B5     		push	{r3, r4, r5, lr}
 724              		.cfi_def_cfa_offset 16
 725              		.cfi_offset 3, -16
 726              		.cfi_offset 4, -12
 727              		.cfi_offset 5, -8
 728              		.cfi_offset 14, -4
 729              		.loc 1 757 0
 730 0002 051C     		mov	r5, r0
 731 0004 0C1C     		mov	r4, r1
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 28


 758:Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/ADC.c **** 
 760:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 732              		.loc 1 761 0
 733 0006 0028     		cmp	r0, #0
 734 0008 19D1     		bne	.L79
 735              	.LVL45:
 736              	.L73:
 762:Generated_Source\PSoC4/ADC.c **** 
 763:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:Generated_Source\PSoC4/ADC.c ****             {
 767:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:Generated_Source\PSoC4/ADC.c ****             }
 769:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:Generated_Source\PSoC4/ADC.c **** 
 771:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 737              		.loc 1 772 0
 738 000a 0F4B     		ldr	r3, .L80
 739 000c 6A00     		lsl	r2, r5, #1
 740 000e D15A     		ldrh	r1, [r2, r3]
 773:Generated_Source\PSoC4/ADC.c **** 
 774:Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 741              		.loc 1 774 0
 742 0010 0E48     		ldr	r0, .L80+4
 772:Generated_Source\PSoC4/ADC.c **** 
 743              		.loc 1 772 0
 744 0012 611A     		sub	r1, r4, r1
 775:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 745              		.loc 1 775 0
 746 0014 0E4A     		ldr	r2, .L80+8
 772:Generated_Source\PSoC4/ADC.c **** 
 747              		.loc 1 772 0
 748 0016 09B2     		sxth	r1, r1
 749              	.LVL46:
 750              		.loc 1 775 0
 751 0018 AD00     		lsl	r5, r5, #2
 752              	.LVL47:
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 753              		.loc 1 774 0
 754 001a 4843     		mul	r0, r1
 755              		.loc 1 775 0
 756 001c 5359     		ldr	r3, [r2, r5]
 757 001e 0029     		cmp	r1, #0
 758 0020 08DD     		ble	.L74
 759              		.loc 1 775 0 is_stmt 0 discriminator 1
 760 0022 D90F     		lsr	r1, r3, #31
 761              	.LVL48:
 762 0024 CB18     		add	r3, r1, r3
 763 0026 5B10     		asr	r3, r3, #1
 764              	.L75:
 776:Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 765              		.loc 1 776 0 is_stmt 1
 766 0028 5159     		ldr	r1, [r2, r5]
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 29


 767              	.LVL49:
 774:Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 768              		.loc 1 774 0
 769 002a C018     		add	r0, r0, r3
 770              	.LVL50:
 771              		.loc 1 776 0
 772 002c FFF7FEFF 		bl	__aeabi_idiv
 773              	.LVL51:
 777:Generated_Source\PSoC4/ADC.c **** 
 778:Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 779:Generated_Source\PSoC4/ADC.c ****     }
 774              		.loc 1 779 0
 775              		@ sp needed
 778:Generated_Source\PSoC4/ADC.c ****     }
 776              		.loc 1 778 0
 777 0030 00B2     		sxth	r0, r0
 778              		.loc 1 779 0
 779 0032 38BD     		pop	{r3, r4, r5, pc}
 780              	.LVL52:
 781              	.L74:
 775:Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 782              		.loc 1 775 0 discriminator 2
 783 0034 D90F     		lsr	r1, r3, #31
 784              	.LVL53:
 785 0036 CB18     		add	r3, r1, r3
 786 0038 5B10     		asr	r3, r3, #1
 787 003a 5B42     		neg	r3, r3
 788 003c F4E7     		b	.L75
 789              	.LVL54:
 790              	.L79:
 761:Generated_Source\PSoC4/ADC.c **** 
 791              		.loc 1 761 0 discriminator 1
 792 003e 0020     		mov	r0, #0
 793              	.LVL55:
 794 0040 FFF7FEFF 		bl	CyHalt
 795              	.LVL56:
 796 0044 E1E7     		b	.L73
 797              	.L81:
 798 0046 C046     		.align	2
 799              	.L80:
 800 0048 00000000 		.word	ADC_offset
 801 004c 10270000 		.word	10000
 802 0050 00000000 		.word	ADC_countsPer10Volt
 803              		.cfi_endproc
 804              	.LFE15:
 805              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 806              		.global	__aeabi_lmul
 807              		.global	__aeabi_ldivmod
 808              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 809              		.align	2
 810              		.global	ADC_CountsTo_uVolts
 811              		.code	16
 812              		.thumb_func
 813              		.type	ADC_CountsTo_uVolts, %function
 814              	ADC_CountsTo_uVolts:
 815              	.LFB16:
 780:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 30


 781:Generated_Source\PSoC4/ADC.c **** 
 782:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/ADC.c ****     *
 786:Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/ADC.c ****     *
 790:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/ADC.c ****     *
 794:Generated_Source\PSoC4/ADC.c ****     * Return:
 795:Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/ADC.c ****     *
 797:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/ADC.c ****     *
 802:Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/ADC.c ****     *
 809:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/ADC.c ****     {
 816              		.loc 1 811 0
 817              		.cfi_startproc
 818              	.LVL57:
 819 0000 38B5     		push	{r3, r4, r5, lr}
 820              		.cfi_def_cfa_offset 16
 821              		.cfi_offset 3, -16
 822              		.cfi_offset 4, -12
 823              		.cfi_offset 5, -8
 824              		.cfi_offset 14, -4
 825              		.loc 1 811 0
 826 0002 051C     		mov	r5, r0
 827 0004 0C1C     		mov	r4, r1
 812:Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/ADC.c **** 
 814:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 828              		.loc 1 815 0
 829 0006 0028     		cmp	r0, #0
 830 0008 02D0     		beq	.L83
 831              		.loc 1 815 0 is_stmt 0 discriminator 1
 832 000a 0020     		mov	r0, #0
 833              	.LVL58:
 834 000c FFF7FEFF 		bl	CyHalt
 835              	.LVL59:
 836              	.L83:
 816:Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 31


 817:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:Generated_Source\PSoC4/ADC.c ****             {
 821:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:Generated_Source\PSoC4/ADC.c ****             }
 823:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:Generated_Source\PSoC4/ADC.c **** 
 825:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 837              		.loc 1 826 0 is_stmt 1
 838 0010 084B     		ldr	r3, .L87
 839 0012 6A00     		lsl	r2, r5, #1
 840 0014 D05A     		ldrh	r0, [r2, r3]
 827:Generated_Source\PSoC4/ADC.c **** 
 828:Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 841              		.loc 1 828 0
 842 0016 084B     		ldr	r3, .L87+4
 826:Generated_Source\PSoC4/ADC.c **** 
 843              		.loc 1 826 0
 844 0018 241A     		sub	r4, r4, r0
 845              	.LVL60:
 846              		.loc 1 828 0
 847 001a AD00     		lsl	r5, r5, #2
 848              	.LVL61:
 849 001c ED58     		ldr	r5, [r5, r3]
 850              	.LVL62:
 851 001e 20B2     		sxth	r0, r4
 852 0020 064A     		ldr	r2, .L87+8
 853 0022 0023     		mov	r3, #0
 854 0024 C117     		asr	r1, r0, #31
 855 0026 FFF7FEFF 		bl	__aeabi_lmul
 856              	.LVL63:
 857 002a EB17     		asr	r3, r5, #31
 858 002c 2A1C     		mov	r2, r5
 859 002e FFF7FEFF 		bl	__aeabi_ldivmod
 860              	.LVL64:
 829:Generated_Source\PSoC4/ADC.c **** 
 830:Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 831:Generated_Source\PSoC4/ADC.c ****     }
 861              		.loc 1 831 0
 862              		@ sp needed
 863              	.LVL65:
 864 0032 38BD     		pop	{r3, r4, r5, pc}
 865              	.L88:
 866              		.align	2
 867              	.L87:
 868 0034 00000000 		.word	ADC_offset
 869 0038 00000000 		.word	ADC_countsPer10Volt
 870 003c 80969800 		.word	10000000
 871              		.cfi_endproc
 872              	.LFE16:
 873              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 874              		.global	__aeabi_i2f
 875              		.global	__aeabi_fmul
 876              		.global	__aeabi_fdiv
 877              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 32


 878              		.align	2
 879              		.global	ADC_CountsTo_Volts
 880              		.code	16
 881              		.thumb_func
 882              		.type	ADC_CountsTo_Volts, %function
 883              	ADC_CountsTo_Volts:
 884              	.LFB17:
 832:Generated_Source\PSoC4/ADC.c **** 
 833:Generated_Source\PSoC4/ADC.c **** 
 834:Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/ADC.c ****     *
 838:Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/ADC.c ****     *
 842:Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/ADC.c ****     *
 846:Generated_Source\PSoC4/ADC.c ****     * Return:
 847:Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/ADC.c ****     *
 849:Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/ADC.c ****     *
 854:Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/ADC.c ****     {
 885              		.loc 1 856 0
 886              		.cfi_startproc
 887              	.LVL66:
 888 0000 38B5     		push	{r3, r4, r5, lr}
 889              		.cfi_def_cfa_offset 16
 890              		.cfi_offset 3, -16
 891              		.cfi_offset 4, -12
 892              		.cfi_offset 5, -8
 893              		.cfi_offset 14, -4
 894              		.loc 1 856 0
 895 0002 051C     		mov	r5, r0
 896 0004 0C1C     		mov	r4, r1
 857:Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:Generated_Source\PSoC4/ADC.c **** 
 859:Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 897              		.loc 1 860 0
 898 0006 0028     		cmp	r0, #0
 899 0008 02D0     		beq	.L90
 900              		.loc 1 860 0 is_stmt 0 discriminator 1
 901 000a 0020     		mov	r0, #0
 902              	.LVL67:
 903 000c FFF7FEFF 		bl	CyHalt
 904              	.LVL68:
 905              	.L90:
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 33


 861:Generated_Source\PSoC4/ADC.c **** 
 862:Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:Generated_Source\PSoC4/ADC.c ****             {
 866:Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:Generated_Source\PSoC4/ADC.c ****             }
 868:Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:Generated_Source\PSoC4/ADC.c **** 
 870:Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 906              		.loc 1 871 0 is_stmt 1
 907 0010 0A4B     		ldr	r3, .L94
 908 0012 6A00     		lsl	r2, r5, #1
 909 0014 D05A     		ldrh	r0, [r2, r3]
 872:Generated_Source\PSoC4/ADC.c **** 
 873:Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 910              		.loc 1 873 0
 911 0016 0A4B     		ldr	r3, .L94+4
 871:Generated_Source\PSoC4/ADC.c **** 
 912              		.loc 1 871 0
 913 0018 241A     		sub	r4, r4, r0
 914              	.LVL69:
 915              		.loc 1 873 0
 916 001a 20B2     		sxth	r0, r4
 917 001c AD00     		lsl	r5, r5, #2
 918              	.LVL70:
 919 001e ED58     		ldr	r5, [r5, r3]
 920              	.LVL71:
 921 0020 FFF7FEFF 		bl	__aeabi_i2f
 922              	.LVL72:
 923 0024 0749     		ldr	r1, .L94+8
 924 0026 FFF7FEFF 		bl	__aeabi_fmul
 925              	.LVL73:
 926 002a 041C     		add	r4, r0, #0
 927              	.LVL74:
 928 002c 281C     		mov	r0, r5
 929 002e FFF7FEFF 		bl	__aeabi_i2f
 930              	.LVL75:
 931 0032 011C     		add	r1, r0, #0
 932 0034 201C     		add	r0, r4, #0
 933 0036 FFF7FEFF 		bl	__aeabi_fdiv
 934              	.LVL76:
 874:Generated_Source\PSoC4/ADC.c **** 
 875:Generated_Source\PSoC4/ADC.c ****         return( volts );
 876:Generated_Source\PSoC4/ADC.c ****     }
 935              		.loc 1 876 0
 936              		@ sp needed
 937 003a 38BD     		pop	{r3, r4, r5, pc}
 938              	.L95:
 939              		.align	2
 940              	.L94:
 941 003c 00000000 		.word	ADC_offset
 942 0040 00000000 		.word	ADC_countsPer10Volt
 943 0044 00002041 		.word	1092616192
 944              		.cfi_endproc
 945              	.LFE17:
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 34


 946              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 947              		.comm	ADC_countsPer10Volt,4,4
 948              		.comm	ADC_offset,2,4
 949              		.global	ADC_initVar
 950              		.bss
 951              		.set	.LANCHOR0,. + 0
 952              		.type	ADC_initVar, %object
 953              		.size	ADC_initVar, 1
 954              	ADC_initVar:
 955 0000 00       		.space	1
 956              		.text
 957              	.Letext0:
 958              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 959              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 960              		.section	.debug_info,"",%progbits
 961              	.Ldebug_info0:
 962 0000 BC050000 		.4byte	0x5bc
 963 0004 0400     		.2byte	0x4
 964 0006 00000000 		.4byte	.Ldebug_abbrev0
 965 000a 04       		.byte	0x4
 966 000b 01       		.uleb128 0x1
 967 000c 20030000 		.4byte	.LASF61
 968 0010 01       		.byte	0x1
 969 0011 30020000 		.4byte	.LASF62
 970 0015 90010000 		.4byte	.LASF63
 971 0019 00000000 		.4byte	.Ldebug_ranges0+0
 972 001d 00000000 		.4byte	0
 973 0021 00000000 		.4byte	.Ldebug_line0
 974 0025 02       		.uleb128 0x2
 975 0026 08       		.byte	0x8
 976 0027 07       		.byte	0x7
 977 0028 32000000 		.4byte	.LASF0
 978 002c 02       		.uleb128 0x2
 979 002d 04       		.byte	0x4
 980 002e 04       		.byte	0x4
 981 002f 59020000 		.4byte	.LASF1
 982 0033 02       		.uleb128 0x2
 983 0034 08       		.byte	0x8
 984 0035 05       		.byte	0x5
 985 0036 5A000000 		.4byte	.LASF2
 986 003a 03       		.uleb128 0x3
 987 003b 04       		.byte	0x4
 988 003c 05       		.byte	0x5
 989 003d 696E7400 		.ascii	"int\000"
 990 0041 02       		.uleb128 0x2
 991 0042 02       		.byte	0x2
 992 0043 05       		.byte	0x5
 993 0044 AD020000 		.4byte	.LASF3
 994 0048 02       		.uleb128 0x2
 995 0049 01       		.byte	0x1
 996 004a 06       		.byte	0x6
 997 004b 68000000 		.4byte	.LASF4
 998 004f 02       		.uleb128 0x2
 999 0050 01       		.byte	0x1
 1000 0051 08       		.byte	0x8
 1001 0052 94020000 		.4byte	.LASF5
 1002 0056 02       		.uleb128 0x2
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 35


 1003 0057 02       		.byte	0x2
 1004 0058 07       		.byte	0x7
 1005 0059 49010000 		.4byte	.LASF6
 1006 005d 02       		.uleb128 0x2
 1007 005e 04       		.byte	0x4
 1008 005f 05       		.byte	0x5
 1009 0060 8B000000 		.4byte	.LASF7
 1010 0064 02       		.uleb128 0x2
 1011 0065 04       		.byte	0x4
 1012 0066 07       		.byte	0x7
 1013 0067 18010000 		.4byte	.LASF8
 1014 006b 02       		.uleb128 0x2
 1015 006c 04       		.byte	0x4
 1016 006d 07       		.byte	0x7
 1017 006e 04010000 		.4byte	.LASF9
 1018 0072 04       		.uleb128 0x4
 1019 0073 BC000000 		.4byte	.LASF10
 1020 0077 02       		.byte	0x2
 1021 0078 9801     		.2byte	0x198
 1022 007a 4F000000 		.4byte	0x4f
 1023 007e 04       		.uleb128 0x4
 1024 007f 00000000 		.4byte	.LASF11
 1025 0083 02       		.byte	0x2
 1026 0084 9901     		.2byte	0x199
 1027 0086 56000000 		.4byte	0x56
 1028 008a 04       		.uleb128 0x4
 1029 008b D3000000 		.4byte	.LASF12
 1030 008f 02       		.byte	0x2
 1031 0090 9A01     		.2byte	0x19a
 1032 0092 64000000 		.4byte	0x64
 1033 0096 04       		.uleb128 0x4
 1034 0097 0C030000 		.4byte	.LASF13
 1035 009b 02       		.byte	0x2
 1036 009c 9C01     		.2byte	0x19c
 1037 009e 41000000 		.4byte	0x41
 1038 00a2 04       		.uleb128 0x4
 1039 00a3 7B000000 		.4byte	.LASF14
 1040 00a7 02       		.byte	0x2
 1041 00a8 9D01     		.2byte	0x19d
 1042 00aa 5D000000 		.4byte	0x5d
 1043 00ae 04       		.uleb128 0x4
 1044 00af 88010000 		.4byte	.LASF15
 1045 00b3 02       		.byte	0x2
 1046 00b4 9E01     		.2byte	0x19e
 1047 00b6 2C000000 		.4byte	0x2c
 1048 00ba 02       		.uleb128 0x2
 1049 00bb 08       		.byte	0x8
 1050 00bc 04       		.byte	0x4
 1051 00bd CC000000 		.4byte	.LASF16
 1052 00c1 04       		.uleb128 0x4
 1053 00c2 09020000 		.4byte	.LASF17
 1054 00c6 02       		.byte	0x2
 1055 00c7 A301     		.2byte	0x1a3
 1056 00c9 33000000 		.4byte	0x33
 1057 00cd 02       		.uleb128 0x2
 1058 00ce 01       		.byte	0x1
 1059 00cf 08       		.byte	0x8
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 36


 1060 00d0 CB020000 		.4byte	.LASF18
 1061 00d4 04       		.uleb128 0x4
 1062 00d5 82010000 		.4byte	.LASF19
 1063 00d9 02       		.byte	0x2
 1064 00da 4402     		.2byte	0x244
 1065 00dc E0000000 		.4byte	0xe0
 1066 00e0 05       		.uleb128 0x5
 1067 00e1 8A000000 		.4byte	0x8a
 1068 00e5 04       		.uleb128 0x4
 1069 00e6 D0020000 		.4byte	.LASF20
 1070 00ea 02       		.byte	0x2
 1071 00eb 5402     		.2byte	0x254
 1072 00ed F1000000 		.4byte	0xf1
 1073 00f1 06       		.uleb128 0x6
 1074 00f2 04       		.byte	0x4
 1075 00f3 F7000000 		.4byte	0xf7
 1076 00f7 07       		.uleb128 0x7
 1077 00f8 02       		.uleb128 0x2
 1078 00f9 04       		.byte	0x4
 1079 00fa 07       		.byte	0x7
 1080 00fb D2010000 		.4byte	.LASF21
 1081 00ff 08       		.uleb128 0x8
 1082 0100 01030000 		.4byte	.LASF64
 1083 0104 01       		.byte	0x1
 1084 0105 4A01     		.2byte	0x14a
 1085 0107 01       		.byte	0x1
 1086 0108 09       		.uleb128 0x9
 1087 0109 29000000 		.4byte	.LASF25
 1088 010d 01       		.byte	0x1
 1089 010e 5E       		.byte	0x5e
 1090 010f 00000000 		.4byte	.LFB1
 1091 0113 F4000000 		.4byte	.LFE1-.LFB1
 1092 0117 01       		.uleb128 0x1
 1093 0118 9C       		.byte	0x9c
 1094 0119 72010000 		.4byte	0x172
 1095 011d 0A       		.uleb128 0xa
 1096 011e C0020000 		.4byte	.LASF22
 1097 0122 01       		.byte	0x1
 1098 0123 60       		.byte	0x60
 1099 0124 8A000000 		.4byte	0x8a
 1100 0128 00000000 		.4byte	.LLST0
 1101 012c 0A       		.uleb128 0xa
 1102 012d 3F010000 		.4byte	.LASF23
 1103 0131 01       		.byte	0x1
 1104 0132 61       		.byte	0x61
 1105 0133 8A000000 		.4byte	0x8a
 1106 0137 20000000 		.4byte	.LLST1
 1107 013b 0A       		.uleb128 0xa
 1108 013c 0F000000 		.4byte	.LASF24
 1109 0140 01       		.byte	0x1
 1110 0141 62       		.byte	0x62
 1111 0142 A2000000 		.4byte	0xa2
 1112 0146 4A000000 		.4byte	.LLST2
 1113 014a 0B       		.uleb128 0xb
 1114 014b 0A000000 		.4byte	.LVL0
 1115 014f 71050000 		.4byte	0x571
 1116 0153 62010000 		.4byte	0x162
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 37


 1117 0157 0C       		.uleb128 0xc
 1118 0158 01       		.uleb128 0x1
 1119 0159 51       		.byte	0x51
 1120 015a 01       		.uleb128 0x1
 1121 015b 33       		.byte	0x33
 1122 015c 0C       		.uleb128 0xc
 1123 015d 01       		.uleb128 0x1
 1124 015e 50       		.byte	0x50
 1125 015f 01       		.uleb128 0x1
 1126 0160 3E       		.byte	0x3e
 1127 0161 00       		.byte	0
 1128 0162 0D       		.uleb128 0xd
 1129 0163 12000000 		.4byte	.LVL1
 1130 0167 87050000 		.4byte	0x587
 1131 016b 0C       		.uleb128 0xc
 1132 016c 01       		.uleb128 0x1
 1133 016d 50       		.byte	0x50
 1134 016e 01       		.uleb128 0x1
 1135 016f 3E       		.byte	0x3e
 1136 0170 00       		.byte	0
 1137 0171 00       		.byte	0
 1138 0172 09       		.uleb128 0x9
 1139 0173 81000000 		.4byte	.LASF26
 1140 0177 01       		.byte	0x1
 1141 0178 3F       		.byte	0x3f
 1142 0179 00000000 		.4byte	.LFB0
 1143 017d 38000000 		.4byte	.LFE0-.LFB0
 1144 0181 01       		.uleb128 0x1
 1145 0182 9C       		.byte	0x9c
 1146 0183 B4010000 		.4byte	0x1b4
 1147 0187 0E       		.uleb128 0xe
 1148 0188 FF000000 		.4byte	0xff
 1149 018c 0A000000 		.4byte	.LBB8
 1150 0190 18000000 		.4byte	.LBE8-.LBB8
 1151 0194 01       		.byte	0x1
 1152 0195 47       		.byte	0x47
 1153 0196 AA010000 		.4byte	0x1aa
 1154 019a 0D       		.uleb128 0xd
 1155 019b 22000000 		.4byte	.LVL9
 1156 019f A1050000 		.4byte	0x5a1
 1157 01a3 0C       		.uleb128 0xc
 1158 01a4 01       		.uleb128 0x1
 1159 01a5 50       		.byte	0x50
 1160 01a6 01       		.uleb128 0x1
 1161 01a7 3A       		.byte	0x3a
 1162 01a8 00       		.byte	0
 1163 01a9 00       		.byte	0
 1164 01aa 0F       		.uleb128 0xf
 1165 01ab 28000000 		.4byte	.LVL10
 1166 01af 08010000 		.4byte	0x108
 1167 01b3 00       		.byte	0
 1168 01b4 10       		.uleb128 0x10
 1169 01b5 FF000000 		.4byte	0xff
 1170 01b9 00000000 		.4byte	.LFB2
 1171 01bd 20000000 		.4byte	.LFE2-.LFB2
 1172 01c1 01       		.uleb128 0x1
 1173 01c2 9C       		.byte	0x9c
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 38


 1174 01c3 D7010000 		.4byte	0x1d7
 1175 01c7 0D       		.uleb128 0xd
 1176 01c8 1A000000 		.4byte	.LVL11
 1177 01cc A1050000 		.4byte	0x5a1
 1178 01d0 0C       		.uleb128 0xc
 1179 01d1 01       		.uleb128 0x1
 1180 01d2 50       		.byte	0x50
 1181 01d3 01       		.uleb128 0x1
 1182 01d4 3A       		.byte	0x3a
 1183 01d5 00       		.byte	0
 1184 01d6 00       		.byte	0
 1185 01d7 11       		.uleb128 0x11
 1186 01d8 B7020000 		.4byte	.LASF27
 1187 01dc 01       		.byte	0x1
 1188 01dd 6D01     		.2byte	0x16d
 1189 01df 00000000 		.4byte	.LFB3
 1190 01e3 10000000 		.4byte	.LFE3-.LFB3
 1191 01e7 01       		.uleb128 0x1
 1192 01e8 9C       		.byte	0x9c
 1193 01e9 11       		.uleb128 0x11
 1194 01ea 49000000 		.4byte	.LASF28
 1195 01ee 01       		.byte	0x1
 1196 01ef 8701     		.2byte	0x187
 1197 01f1 00000000 		.4byte	.LFB4
 1198 01f5 0C000000 		.4byte	.LFE4-.LFB4
 1199 01f9 01       		.uleb128 0x1
 1200 01fa 9C       		.byte	0x9c
 1201 01fb 11       		.uleb128 0x11
 1202 01fc 6B010000 		.4byte	.LASF29
 1203 0200 01       		.byte	0x1
 1204 0201 A001     		.2byte	0x1a0
 1205 0203 00000000 		.4byte	.LFB5
 1206 0207 02000000 		.4byte	.LFE5-.LFB5
 1207 020b 01       		.uleb128 0x1
 1208 020c 9C       		.byte	0x9c
 1209 020d 12       		.uleb128 0x12
 1210 020e F5010000 		.4byte	.LASF31
 1211 0212 01       		.byte	0x1
 1212 0213 C201     		.2byte	0x1c2
 1213 0215 8A000000 		.4byte	0x8a
 1214 0219 00000000 		.4byte	.LFB6
 1215 021d 2C000000 		.4byte	.LFE6-.LFB6
 1216 0221 01       		.uleb128 0x1
 1217 0222 9C       		.byte	0x9c
 1218 0223 48020000 		.4byte	0x248
 1219 0227 13       		.uleb128 0x13
 1220 0228 EB000000 		.4byte	.LASF33
 1221 022c 01       		.byte	0x1
 1222 022d C201     		.2byte	0x1c2
 1223 022f 8A000000 		.4byte	0x8a
 1224 0233 60000000 		.4byte	.LLST3
 1225 0237 14       		.uleb128 0x14
 1226 0238 74000000 		.4byte	.LASF30
 1227 023c 01       		.byte	0x1
 1228 023d C401     		.2byte	0x1c4
 1229 023f 8A000000 		.4byte	0x8a
 1230 0243 81000000 		.4byte	.LLST4
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 39


 1231 0247 00       		.byte	0
 1232 0248 12       		.uleb128 0x12
 1233 0249 BE030000 		.4byte	.LASF32
 1234 024d 01       		.byte	0x1
 1235 024e F801     		.2byte	0x1f8
 1236 0250 96000000 		.4byte	0x96
 1237 0254 00000000 		.4byte	.LFB7
 1238 0258 20000000 		.4byte	.LFE7-.LFB7
 1239 025c 01       		.uleb128 0x1
 1240 025d 9C       		.byte	0x9c
 1241 025e 92020000 		.4byte	0x292
 1242 0262 13       		.uleb128 0x13
 1243 0263 C6020000 		.4byte	.LASF34
 1244 0267 01       		.byte	0x1
 1245 0268 F801     		.2byte	0x1f8
 1246 026a 8A000000 		.4byte	0x8a
 1247 026e AB000000 		.4byte	.LLST5
 1248 0272 14       		.uleb128 0x14
 1249 0273 B7030000 		.4byte	.LASF35
 1250 0277 01       		.byte	0x1
 1251 0278 FA01     		.2byte	0x1fa
 1252 027a 8A000000 		.4byte	0x8a
 1253 027e E5000000 		.4byte	.LLST6
 1254 0282 0D       		.uleb128 0xd
 1255 0283 16000000 		.4byte	.LVL24
 1256 0287 B2050000 		.4byte	0x5b2
 1257 028b 0C       		.uleb128 0xc
 1258 028c 01       		.uleb128 0x1
 1259 028d 50       		.byte	0x50
 1260 028e 01       		.uleb128 0x1
 1261 028f 30       		.byte	0x30
 1262 0290 00       		.byte	0
 1263 0291 00       		.byte	0
 1264 0292 15       		.uleb128 0x15
 1265 0293 20020000 		.4byte	.LASF36
 1266 0297 01       		.byte	0x1
 1267 0298 2502     		.2byte	0x225
 1268 029a 00000000 		.4byte	.LFB8
 1269 029e 10000000 		.4byte	.LFE8-.LFB8
 1270 02a2 01       		.uleb128 0x1
 1271 02a3 9C       		.byte	0x9c
 1272 02a4 B9020000 		.4byte	0x2b9
 1273 02a8 13       		.uleb128 0x13
 1274 02a9 DA000000 		.4byte	.LASF37
 1275 02ad 01       		.byte	0x1
 1276 02ae 2502     		.2byte	0x225
 1277 02b0 8A000000 		.4byte	0x8a
 1278 02b4 FE000000 		.4byte	.LLST7
 1279 02b8 00       		.byte	0
 1280 02b9 15       		.uleb128 0x15
 1281 02ba 7D020000 		.4byte	.LASF38
 1282 02be 01       		.byte	0x1
 1283 02bf 5102     		.2byte	0x251
 1284 02c1 00000000 		.4byte	.LFB9
 1285 02c5 1C000000 		.4byte	.LFE9-.LFB9
 1286 02c9 01       		.uleb128 0x1
 1287 02ca 9C       		.byte	0x9c
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 40


 1288 02cb E0020000 		.4byte	0x2e0
 1289 02cf 13       		.uleb128 0x13
 1290 02d0 DB010000 		.4byte	.LASF39
 1291 02d4 01       		.byte	0x1
 1292 02d5 5102     		.2byte	0x251
 1293 02d7 8A000000 		.4byte	0x8a
 1294 02db 1F010000 		.4byte	.LLST8
 1295 02df 00       		.byte	0
 1296 02e0 15       		.uleb128 0x15
 1297 02e1 E4010000 		.4byte	.LASF40
 1298 02e5 01       		.byte	0x1
 1299 02e6 6602     		.2byte	0x266
 1300 02e8 00000000 		.4byte	.LFB10
 1301 02ec 18000000 		.4byte	.LFE10-.LFB10
 1302 02f0 01       		.uleb128 0x1
 1303 02f1 9C       		.byte	0x9c
 1304 02f2 07030000 		.4byte	0x307
 1305 02f6 13       		.uleb128 0x13
 1306 02f7 5F020000 		.4byte	.LASF41
 1307 02fb 01       		.byte	0x1
 1308 02fc 6602     		.2byte	0x266
 1309 02fe 8A000000 		.4byte	0x8a
 1310 0302 40010000 		.4byte	.LLST9
 1311 0306 00       		.byte	0
 1312 0307 15       		.uleb128 0x15
 1313 0308 F3000000 		.4byte	.LASF42
 1314 030c 01       		.byte	0x1
 1315 030d 7E02     		.2byte	0x27e
 1316 030f 00000000 		.4byte	.LFB11
 1317 0313 10000000 		.4byte	.LFE11-.LFB11
 1318 0317 01       		.uleb128 0x1
 1319 0318 9C       		.byte	0x9c
 1320 0319 2E030000 		.4byte	0x32e
 1321 031d 13       		.uleb128 0x13
 1322 031e DA000000 		.4byte	.LASF37
 1323 0322 01       		.byte	0x1
 1324 0323 7E02     		.2byte	0x27e
 1325 0325 8A000000 		.4byte	0x8a
 1326 0329 61010000 		.4byte	.LLST10
 1327 032d 00       		.byte	0
 1328 032e 15       		.uleb128 0x15
 1329 032f 2A010000 		.4byte	.LASF43
 1330 0333 01       		.byte	0x1
 1331 0334 9502     		.2byte	0x295
 1332 0336 00000000 		.4byte	.LFB12
 1333 033a 10000000 		.4byte	.LFE12-.LFB12
 1334 033e 01       		.uleb128 0x1
 1335 033f 9C       		.byte	0x9c
 1336 0340 55030000 		.4byte	0x355
 1337 0344 13       		.uleb128 0x13
 1338 0345 DA000000 		.4byte	.LASF37
 1339 0349 01       		.byte	0x1
 1340 034a 9502     		.2byte	0x295
 1341 034c 8A000000 		.4byte	0x8a
 1342 0350 82010000 		.4byte	.LLST11
 1343 0354 00       		.byte	0
 1344 0355 15       		.uleb128 0x15
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 41


 1345 0356 12030000 		.4byte	.LASF44
 1346 035a 01       		.byte	0x1
 1347 035b B102     		.2byte	0x2b1
 1348 035d 00000000 		.4byte	.LFB13
 1349 0361 1C000000 		.4byte	.LFE13-.LFB13
 1350 0365 01       		.uleb128 0x1
 1351 0366 9C       		.byte	0x9c
 1352 0367 9B030000 		.4byte	0x39b
 1353 036b 13       		.uleb128 0x13
 1354 036c C6020000 		.4byte	.LASF34
 1355 0370 01       		.byte	0x1
 1356 0371 B102     		.2byte	0x2b1
 1357 0373 8A000000 		.4byte	0x8a
 1358 0377 A3010000 		.4byte	.LLST12
 1359 037b 13       		.uleb128 0x13
 1360 037c F0020000 		.4byte	.LASF45
 1361 0380 01       		.byte	0x1
 1362 0381 B102     		.2byte	0x2b1
 1363 0383 96000000 		.4byte	0x96
 1364 0387 CF010000 		.4byte	.LLST13
 1365 038b 0D       		.uleb128 0xd
 1366 038c 10000000 		.4byte	.LVL37
 1367 0390 B2050000 		.4byte	0x5b2
 1368 0394 0C       		.uleb128 0xc
 1369 0395 01       		.uleb128 0x1
 1370 0396 50       		.byte	0x50
 1371 0397 01       		.uleb128 0x1
 1372 0398 30       		.byte	0x30
 1373 0399 00       		.byte	0
 1374 039a 00       		.byte	0
 1375 039b 15       		.uleb128 0x15
 1376 039c 4D020000 		.4byte	.LASF46
 1377 03a0 01       		.byte	0x1
 1378 03a1 D302     		.2byte	0x2d3
 1379 03a3 00000000 		.4byte	.LFB14
 1380 03a7 1C000000 		.4byte	.LFE14-.LFB14
 1381 03ab 01       		.uleb128 0x1
 1382 03ac 9C       		.byte	0x9c
 1383 03ad E1030000 		.4byte	0x3e1
 1384 03b1 13       		.uleb128 0x13
 1385 03b2 C6020000 		.4byte	.LASF34
 1386 03b6 01       		.byte	0x1
 1387 03b7 D302     		.2byte	0x2d3
 1388 03b9 8A000000 		.4byte	0x8a
 1389 03bd F0010000 		.4byte	.LLST14
 1390 03c1 13       		.uleb128 0x13
 1391 03c2 07000000 		.4byte	.LASF47
 1392 03c6 01       		.byte	0x1
 1393 03c7 D302     		.2byte	0x2d3
 1394 03c9 A2000000 		.4byte	0xa2
 1395 03cd 1C020000 		.4byte	.LLST15
 1396 03d1 0D       		.uleb128 0xd
 1397 03d2 10000000 		.4byte	.LVL41
 1398 03d6 B2050000 		.4byte	0x5b2
 1399 03da 0C       		.uleb128 0xc
 1400 03db 01       		.uleb128 0x1
 1401 03dc 50       		.byte	0x50
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 42


 1402 03dd 01       		.uleb128 0x1
 1403 03de 30       		.byte	0x30
 1404 03df 00       		.byte	0
 1405 03e0 00       		.byte	0
 1406 03e1 16       		.uleb128 0x16
 1407 03e2 69020000 		.4byte	.LASF48
 1408 03e6 01       		.byte	0x1
 1409 03e7 F402     		.2byte	0x2f4
 1410 03e9 96000000 		.4byte	0x96
 1411 03ed 00000000 		.4byte	.LFB15
 1412 03f1 54000000 		.4byte	.LFE15-.LFB15
 1413 03f5 01       		.uleb128 0x1
 1414 03f6 9C       		.byte	0x9c
 1415 03f7 3B040000 		.4byte	0x43b
 1416 03fb 13       		.uleb128 0x13
 1417 03fc C6020000 		.4byte	.LASF34
 1418 0400 01       		.byte	0x1
 1419 0401 F402     		.2byte	0x2f4
 1420 0403 8A000000 		.4byte	0x8a
 1421 0407 4C020000 		.4byte	.LLST16
 1422 040b 13       		.uleb128 0x13
 1423 040c F7020000 		.4byte	.LASF49
 1424 0410 01       		.byte	0x1
 1425 0411 F402     		.2byte	0x2f4
 1426 0413 96000000 		.4byte	0x96
 1427 0417 8E020000 		.4byte	.LLST17
 1428 041b 14       		.uleb128 0x14
 1429 041c 7B010000 		.4byte	.LASF50
 1430 0420 01       		.byte	0x1
 1431 0421 F602     		.2byte	0x2f6
 1432 0423 96000000 		.4byte	0x96
 1433 0427 DE020000 		.4byte	.LLST18
 1434 042b 0D       		.uleb128 0xd
 1435 042c 44000000 		.4byte	.LVL56
 1436 0430 B2050000 		.4byte	0x5b2
 1437 0434 0C       		.uleb128 0xc
 1438 0435 01       		.uleb128 0x1
 1439 0436 50       		.byte	0x50
 1440 0437 01       		.uleb128 0x1
 1441 0438 30       		.byte	0x30
 1442 0439 00       		.byte	0
 1443 043a 00       		.byte	0
 1444 043b 16       		.uleb128 0x16
 1445 043c 94000000 		.4byte	.LASF51
 1446 0440 01       		.byte	0x1
 1447 0441 2A03     		.2byte	0x32a
 1448 0443 A2000000 		.4byte	0xa2
 1449 0447 00000000 		.4byte	.LFB16
 1450 044b 40000000 		.4byte	.LFE16-.LFB16
 1451 044f 01       		.uleb128 0x1
 1452 0450 9C       		.byte	0x9c
 1453 0451 95040000 		.4byte	0x495
 1454 0455 13       		.uleb128 0x13
 1455 0456 C6020000 		.4byte	.LASF34
 1456 045a 01       		.byte	0x1
 1457 045b 2A03     		.2byte	0x32a
 1458 045d 8A000000 		.4byte	0x8a
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 43


 1459 0461 F9020000 		.4byte	.LLST19
 1460 0465 13       		.uleb128 0x13
 1461 0466 F7020000 		.4byte	.LASF49
 1462 046a 01       		.byte	0x1
 1463 046b 2A03     		.2byte	0x32a
 1464 046d 96000000 		.4byte	0x96
 1465 0471 25030000 		.4byte	.LLST20
 1466 0475 14       		.uleb128 0x14
 1467 0476 11010000 		.4byte	.LASF52
 1468 047a 01       		.byte	0x1
 1469 047b 2C03     		.2byte	0x32c
 1470 047d C1000000 		.4byte	0xc1
 1471 0481 51030000 		.4byte	.LLST21
 1472 0485 0D       		.uleb128 0xd
 1473 0486 10000000 		.4byte	.LVL59
 1474 048a B2050000 		.4byte	0x5b2
 1475 048e 0C       		.uleb128 0xc
 1476 048f 01       		.uleb128 0x1
 1477 0490 50       		.byte	0x50
 1478 0491 01       		.uleb128 0x1
 1479 0492 30       		.byte	0x30
 1480 0493 00       		.byte	0
 1481 0494 00       		.byte	0
 1482 0495 16       		.uleb128 0x16
 1483 0496 16000000 		.4byte	.LASF53
 1484 049a 01       		.byte	0x1
 1485 049b 5703     		.2byte	0x357
 1486 049d AE000000 		.4byte	0xae
 1487 04a1 00000000 		.4byte	.LFB17
 1488 04a5 48000000 		.4byte	.LFE17-.LFB17
 1489 04a9 01       		.uleb128 0x1
 1490 04aa 9C       		.byte	0x9c
 1491 04ab EF040000 		.4byte	0x4ef
 1492 04af 13       		.uleb128 0x13
 1493 04b0 C6020000 		.4byte	.LASF34
 1494 04b4 01       		.byte	0x1
 1495 04b5 5703     		.2byte	0x357
 1496 04b7 8A000000 		.4byte	0x8a
 1497 04bb 7D030000 		.4byte	.LLST22
 1498 04bf 13       		.uleb128 0x13
 1499 04c0 F7020000 		.4byte	.LASF49
 1500 04c4 01       		.byte	0x1
 1501 04c5 5703     		.2byte	0x357
 1502 04c7 96000000 		.4byte	0x96
 1503 04cb A9030000 		.4byte	.LLST23
 1504 04cf 14       		.uleb128 0x14
 1505 04d0 39010000 		.4byte	.LASF54
 1506 04d4 01       		.byte	0x1
 1507 04d5 5903     		.2byte	0x359
 1508 04d7 AE000000 		.4byte	0xae
 1509 04db D5030000 		.4byte	.LLST24
 1510 04df 0D       		.uleb128 0xd
 1511 04e0 10000000 		.4byte	.LVL68
 1512 04e4 B2050000 		.4byte	0x5b2
 1513 04e8 0C       		.uleb128 0xc
 1514 04e9 01       		.uleb128 0x1
 1515 04ea 50       		.byte	0x50
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 44


 1516 04eb 01       		.uleb128 0x1
 1517 04ec 30       		.byte	0x30
 1518 04ed 00       		.byte	0
 1519 04ee 00       		.byte	0
 1520 04ef 17       		.uleb128 0x17
 1521 04f0 8A000000 		.4byte	0x8a
 1522 04f4 FF040000 		.4byte	0x4ff
 1523 04f8 18       		.uleb128 0x18
 1524 04f9 F8000000 		.4byte	0xf8
 1525 04fd 00       		.byte	0
 1526 04fe 00       		.byte	0
 1527 04ff 19       		.uleb128 0x19
 1528 0500 DD020000 		.4byte	.LASF55
 1529 0504 01       		.byte	0x1
 1530 0505 21       		.byte	0x21
 1531 0506 0F050000 		.4byte	0x50f
 1532 050a 04       		.byte	0x4
 1533 050b 00       		.byte	0
 1534 050c 00       		.byte	0
 1535 050d 00       		.byte	0
 1536 050e 00       		.byte	0
 1537 050f 1A       		.uleb128 0x1a
 1538 0510 EF040000 		.4byte	0x4ef
 1539 0514 1B       		.uleb128 0x1b
 1540 0515 DF000000 		.4byte	.LASF56
 1541 0519 01       		.byte	0x1
 1542 051a 18       		.byte	0x18
 1543 051b 72000000 		.4byte	0x72
 1544 051f 05       		.uleb128 0x5
 1545 0520 03       		.byte	0x3
 1546 0521 00000000 		.4byte	ADC_initVar
 1547 0525 17       		.uleb128 0x17
 1548 0526 96000000 		.4byte	0x96
 1549 052a 35050000 		.4byte	0x535
 1550 052e 18       		.uleb128 0x18
 1551 052f F8000000 		.4byte	0xf8
 1552 0533 00       		.byte	0
 1553 0534 00       		.byte	0
 1554 0535 1B       		.uleb128 0x1b
 1555 0536 A2020000 		.4byte	.LASF57
 1556 053a 01       		.byte	0x1
 1557 053b 19       		.byte	0x19
 1558 053c 46050000 		.4byte	0x546
 1559 0540 05       		.uleb128 0x5
 1560 0541 03       		.byte	0x3
 1561 0542 00000000 		.4byte	ADC_offset
 1562 0546 05       		.uleb128 0x5
 1563 0547 25050000 		.4byte	0x525
 1564 054b 17       		.uleb128 0x17
 1565 054c A2000000 		.4byte	0xa2
 1566 0550 5B050000 		.4byte	0x55b
 1567 0554 18       		.uleb128 0x18
 1568 0555 F8000000 		.4byte	0xf8
 1569 0559 00       		.byte	0
 1570 055a 00       		.byte	0
 1571 055b 1B       		.uleb128 0x1b
 1572 055c A8000000 		.4byte	.LASF58
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 45


 1573 0560 01       		.byte	0x1
 1574 0561 1A       		.byte	0x1a
 1575 0562 6C050000 		.4byte	0x56c
 1576 0566 05       		.uleb128 0x5
 1577 0567 03       		.byte	0x3
 1578 0568 00000000 		.4byte	ADC_countsPer10Volt
 1579 056c 05       		.uleb128 0x5
 1580 056d 4B050000 		.4byte	0x54b
 1581 0571 1C       		.uleb128 0x1c
 1582 0572 0F020000 		.4byte	.LASF59
 1583 0576 03       		.byte	0x3
 1584 0577 BE       		.byte	0xbe
 1585 0578 87050000 		.4byte	0x587
 1586 057c 1D       		.uleb128 0x1d
 1587 057d 72000000 		.4byte	0x72
 1588 0581 1D       		.uleb128 0x1d
 1589 0582 72000000 		.4byte	0x72
 1590 0586 00       		.byte	0
 1591 0587 1E       		.uleb128 0x1e
 1592 0588 5C010000 		.4byte	.LASF65
 1593 058c 03       		.byte	0x3
 1594 058d BB       		.byte	0xbb
 1595 058e E5000000 		.4byte	0xe5
 1596 0592 A1050000 		.4byte	0x5a1
 1597 0596 1D       		.uleb128 0x1d
 1598 0597 72000000 		.4byte	0x72
 1599 059b 1D       		.uleb128 0x1d
 1600 059c E5000000 		.4byte	0xe5
 1601 05a0 00       		.byte	0
 1602 05a1 1C       		.uleb128 0x1c
 1603 05a2 C2000000 		.4byte	.LASF60
 1604 05a6 03       		.byte	0x3
 1605 05a7 D8       		.byte	0xd8
 1606 05a8 B2050000 		.4byte	0x5b2
 1607 05ac 1D       		.uleb128 0x1d
 1608 05ad 7E000000 		.4byte	0x7e
 1609 05b1 00       		.byte	0
 1610 05b2 1F       		.uleb128 0x1f
 1611 05b3 8D020000 		.4byte	.LASF66
 1612 05b7 03       		.byte	0x3
 1613 05b8 E5       		.byte	0xe5
 1614 05b9 1D       		.uleb128 0x1d
 1615 05ba 72000000 		.4byte	0x72
 1616 05be 00       		.byte	0
 1617 05bf 00       		.byte	0
 1618              		.section	.debug_abbrev,"",%progbits
 1619              	.Ldebug_abbrev0:
 1620 0000 01       		.uleb128 0x1
 1621 0001 11       		.uleb128 0x11
 1622 0002 01       		.byte	0x1
 1623 0003 25       		.uleb128 0x25
 1624 0004 0E       		.uleb128 0xe
 1625 0005 13       		.uleb128 0x13
 1626 0006 0B       		.uleb128 0xb
 1627 0007 03       		.uleb128 0x3
 1628 0008 0E       		.uleb128 0xe
 1629 0009 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 46


 1630 000a 0E       		.uleb128 0xe
 1631 000b 55       		.uleb128 0x55
 1632 000c 17       		.uleb128 0x17
 1633 000d 11       		.uleb128 0x11
 1634 000e 01       		.uleb128 0x1
 1635 000f 10       		.uleb128 0x10
 1636 0010 17       		.uleb128 0x17
 1637 0011 00       		.byte	0
 1638 0012 00       		.byte	0
 1639 0013 02       		.uleb128 0x2
 1640 0014 24       		.uleb128 0x24
 1641 0015 00       		.byte	0
 1642 0016 0B       		.uleb128 0xb
 1643 0017 0B       		.uleb128 0xb
 1644 0018 3E       		.uleb128 0x3e
 1645 0019 0B       		.uleb128 0xb
 1646 001a 03       		.uleb128 0x3
 1647 001b 0E       		.uleb128 0xe
 1648 001c 00       		.byte	0
 1649 001d 00       		.byte	0
 1650 001e 03       		.uleb128 0x3
 1651 001f 24       		.uleb128 0x24
 1652 0020 00       		.byte	0
 1653 0021 0B       		.uleb128 0xb
 1654 0022 0B       		.uleb128 0xb
 1655 0023 3E       		.uleb128 0x3e
 1656 0024 0B       		.uleb128 0xb
 1657 0025 03       		.uleb128 0x3
 1658 0026 08       		.uleb128 0x8
 1659 0027 00       		.byte	0
 1660 0028 00       		.byte	0
 1661 0029 04       		.uleb128 0x4
 1662 002a 16       		.uleb128 0x16
 1663 002b 00       		.byte	0
 1664 002c 03       		.uleb128 0x3
 1665 002d 0E       		.uleb128 0xe
 1666 002e 3A       		.uleb128 0x3a
 1667 002f 0B       		.uleb128 0xb
 1668 0030 3B       		.uleb128 0x3b
 1669 0031 05       		.uleb128 0x5
 1670 0032 49       		.uleb128 0x49
 1671 0033 13       		.uleb128 0x13
 1672 0034 00       		.byte	0
 1673 0035 00       		.byte	0
 1674 0036 05       		.uleb128 0x5
 1675 0037 35       		.uleb128 0x35
 1676 0038 00       		.byte	0
 1677 0039 49       		.uleb128 0x49
 1678 003a 13       		.uleb128 0x13
 1679 003b 00       		.byte	0
 1680 003c 00       		.byte	0
 1681 003d 06       		.uleb128 0x6
 1682 003e 0F       		.uleb128 0xf
 1683 003f 00       		.byte	0
 1684 0040 0B       		.uleb128 0xb
 1685 0041 0B       		.uleb128 0xb
 1686 0042 49       		.uleb128 0x49
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 47


 1687 0043 13       		.uleb128 0x13
 1688 0044 00       		.byte	0
 1689 0045 00       		.byte	0
 1690 0046 07       		.uleb128 0x7
 1691 0047 15       		.uleb128 0x15
 1692 0048 00       		.byte	0
 1693 0049 27       		.uleb128 0x27
 1694 004a 19       		.uleb128 0x19
 1695 004b 00       		.byte	0
 1696 004c 00       		.byte	0
 1697 004d 08       		.uleb128 0x8
 1698 004e 2E       		.uleb128 0x2e
 1699 004f 00       		.byte	0
 1700 0050 3F       		.uleb128 0x3f
 1701 0051 19       		.uleb128 0x19
 1702 0052 03       		.uleb128 0x3
 1703 0053 0E       		.uleb128 0xe
 1704 0054 3A       		.uleb128 0x3a
 1705 0055 0B       		.uleb128 0xb
 1706 0056 3B       		.uleb128 0x3b
 1707 0057 05       		.uleb128 0x5
 1708 0058 27       		.uleb128 0x27
 1709 0059 19       		.uleb128 0x19
 1710 005a 20       		.uleb128 0x20
 1711 005b 0B       		.uleb128 0xb
 1712 005c 00       		.byte	0
 1713 005d 00       		.byte	0
 1714 005e 09       		.uleb128 0x9
 1715 005f 2E       		.uleb128 0x2e
 1716 0060 01       		.byte	0x1
 1717 0061 3F       		.uleb128 0x3f
 1718 0062 19       		.uleb128 0x19
 1719 0063 03       		.uleb128 0x3
 1720 0064 0E       		.uleb128 0xe
 1721 0065 3A       		.uleb128 0x3a
 1722 0066 0B       		.uleb128 0xb
 1723 0067 3B       		.uleb128 0x3b
 1724 0068 0B       		.uleb128 0xb
 1725 0069 27       		.uleb128 0x27
 1726 006a 19       		.uleb128 0x19
 1727 006b 11       		.uleb128 0x11
 1728 006c 01       		.uleb128 0x1
 1729 006d 12       		.uleb128 0x12
 1730 006e 06       		.uleb128 0x6
 1731 006f 40       		.uleb128 0x40
 1732 0070 18       		.uleb128 0x18
 1733 0071 9742     		.uleb128 0x2117
 1734 0073 19       		.uleb128 0x19
 1735 0074 01       		.uleb128 0x1
 1736 0075 13       		.uleb128 0x13
 1737 0076 00       		.byte	0
 1738 0077 00       		.byte	0
 1739 0078 0A       		.uleb128 0xa
 1740 0079 34       		.uleb128 0x34
 1741 007a 00       		.byte	0
 1742 007b 03       		.uleb128 0x3
 1743 007c 0E       		.uleb128 0xe
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 48


 1744 007d 3A       		.uleb128 0x3a
 1745 007e 0B       		.uleb128 0xb
 1746 007f 3B       		.uleb128 0x3b
 1747 0080 0B       		.uleb128 0xb
 1748 0081 49       		.uleb128 0x49
 1749 0082 13       		.uleb128 0x13
 1750 0083 02       		.uleb128 0x2
 1751 0084 17       		.uleb128 0x17
 1752 0085 00       		.byte	0
 1753 0086 00       		.byte	0
 1754 0087 0B       		.uleb128 0xb
 1755 0088 898201   		.uleb128 0x4109
 1756 008b 01       		.byte	0x1
 1757 008c 11       		.uleb128 0x11
 1758 008d 01       		.uleb128 0x1
 1759 008e 31       		.uleb128 0x31
 1760 008f 13       		.uleb128 0x13
 1761 0090 01       		.uleb128 0x1
 1762 0091 13       		.uleb128 0x13
 1763 0092 00       		.byte	0
 1764 0093 00       		.byte	0
 1765 0094 0C       		.uleb128 0xc
 1766 0095 8A8201   		.uleb128 0x410a
 1767 0098 00       		.byte	0
 1768 0099 02       		.uleb128 0x2
 1769 009a 18       		.uleb128 0x18
 1770 009b 9142     		.uleb128 0x2111
 1771 009d 18       		.uleb128 0x18
 1772 009e 00       		.byte	0
 1773 009f 00       		.byte	0
 1774 00a0 0D       		.uleb128 0xd
 1775 00a1 898201   		.uleb128 0x4109
 1776 00a4 01       		.byte	0x1
 1777 00a5 11       		.uleb128 0x11
 1778 00a6 01       		.uleb128 0x1
 1779 00a7 31       		.uleb128 0x31
 1780 00a8 13       		.uleb128 0x13
 1781 00a9 00       		.byte	0
 1782 00aa 00       		.byte	0
 1783 00ab 0E       		.uleb128 0xe
 1784 00ac 1D       		.uleb128 0x1d
 1785 00ad 01       		.byte	0x1
 1786 00ae 31       		.uleb128 0x31
 1787 00af 13       		.uleb128 0x13
 1788 00b0 11       		.uleb128 0x11
 1789 00b1 01       		.uleb128 0x1
 1790 00b2 12       		.uleb128 0x12
 1791 00b3 06       		.uleb128 0x6
 1792 00b4 58       		.uleb128 0x58
 1793 00b5 0B       		.uleb128 0xb
 1794 00b6 59       		.uleb128 0x59
 1795 00b7 0B       		.uleb128 0xb
 1796 00b8 01       		.uleb128 0x1
 1797 00b9 13       		.uleb128 0x13
 1798 00ba 00       		.byte	0
 1799 00bb 00       		.byte	0
 1800 00bc 0F       		.uleb128 0xf
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 49


 1801 00bd 898201   		.uleb128 0x4109
 1802 00c0 00       		.byte	0
 1803 00c1 11       		.uleb128 0x11
 1804 00c2 01       		.uleb128 0x1
 1805 00c3 31       		.uleb128 0x31
 1806 00c4 13       		.uleb128 0x13
 1807 00c5 00       		.byte	0
 1808 00c6 00       		.byte	0
 1809 00c7 10       		.uleb128 0x10
 1810 00c8 2E       		.uleb128 0x2e
 1811 00c9 01       		.byte	0x1
 1812 00ca 31       		.uleb128 0x31
 1813 00cb 13       		.uleb128 0x13
 1814 00cc 11       		.uleb128 0x11
 1815 00cd 01       		.uleb128 0x1
 1816 00ce 12       		.uleb128 0x12
 1817 00cf 06       		.uleb128 0x6
 1818 00d0 40       		.uleb128 0x40
 1819 00d1 18       		.uleb128 0x18
 1820 00d2 9742     		.uleb128 0x2117
 1821 00d4 19       		.uleb128 0x19
 1822 00d5 01       		.uleb128 0x1
 1823 00d6 13       		.uleb128 0x13
 1824 00d7 00       		.byte	0
 1825 00d8 00       		.byte	0
 1826 00d9 11       		.uleb128 0x11
 1827 00da 2E       		.uleb128 0x2e
 1828 00db 00       		.byte	0
 1829 00dc 3F       		.uleb128 0x3f
 1830 00dd 19       		.uleb128 0x19
 1831 00de 03       		.uleb128 0x3
 1832 00df 0E       		.uleb128 0xe
 1833 00e0 3A       		.uleb128 0x3a
 1834 00e1 0B       		.uleb128 0xb
 1835 00e2 3B       		.uleb128 0x3b
 1836 00e3 05       		.uleb128 0x5
 1837 00e4 27       		.uleb128 0x27
 1838 00e5 19       		.uleb128 0x19
 1839 00e6 11       		.uleb128 0x11
 1840 00e7 01       		.uleb128 0x1
 1841 00e8 12       		.uleb128 0x12
 1842 00e9 06       		.uleb128 0x6
 1843 00ea 40       		.uleb128 0x40
 1844 00eb 18       		.uleb128 0x18
 1845 00ec 9742     		.uleb128 0x2117
 1846 00ee 19       		.uleb128 0x19
 1847 00ef 00       		.byte	0
 1848 00f0 00       		.byte	0
 1849 00f1 12       		.uleb128 0x12
 1850 00f2 2E       		.uleb128 0x2e
 1851 00f3 01       		.byte	0x1
 1852 00f4 3F       		.uleb128 0x3f
 1853 00f5 19       		.uleb128 0x19
 1854 00f6 03       		.uleb128 0x3
 1855 00f7 0E       		.uleb128 0xe
 1856 00f8 3A       		.uleb128 0x3a
 1857 00f9 0B       		.uleb128 0xb
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 50


 1858 00fa 3B       		.uleb128 0x3b
 1859 00fb 05       		.uleb128 0x5
 1860 00fc 27       		.uleb128 0x27
 1861 00fd 19       		.uleb128 0x19
 1862 00fe 49       		.uleb128 0x49
 1863 00ff 13       		.uleb128 0x13
 1864 0100 11       		.uleb128 0x11
 1865 0101 01       		.uleb128 0x1
 1866 0102 12       		.uleb128 0x12
 1867 0103 06       		.uleb128 0x6
 1868 0104 40       		.uleb128 0x40
 1869 0105 18       		.uleb128 0x18
 1870 0106 9742     		.uleb128 0x2117
 1871 0108 19       		.uleb128 0x19
 1872 0109 01       		.uleb128 0x1
 1873 010a 13       		.uleb128 0x13
 1874 010b 00       		.byte	0
 1875 010c 00       		.byte	0
 1876 010d 13       		.uleb128 0x13
 1877 010e 05       		.uleb128 0x5
 1878 010f 00       		.byte	0
 1879 0110 03       		.uleb128 0x3
 1880 0111 0E       		.uleb128 0xe
 1881 0112 3A       		.uleb128 0x3a
 1882 0113 0B       		.uleb128 0xb
 1883 0114 3B       		.uleb128 0x3b
 1884 0115 05       		.uleb128 0x5
 1885 0116 49       		.uleb128 0x49
 1886 0117 13       		.uleb128 0x13
 1887 0118 02       		.uleb128 0x2
 1888 0119 17       		.uleb128 0x17
 1889 011a 00       		.byte	0
 1890 011b 00       		.byte	0
 1891 011c 14       		.uleb128 0x14
 1892 011d 34       		.uleb128 0x34
 1893 011e 00       		.byte	0
 1894 011f 03       		.uleb128 0x3
 1895 0120 0E       		.uleb128 0xe
 1896 0121 3A       		.uleb128 0x3a
 1897 0122 0B       		.uleb128 0xb
 1898 0123 3B       		.uleb128 0x3b
 1899 0124 05       		.uleb128 0x5
 1900 0125 49       		.uleb128 0x49
 1901 0126 13       		.uleb128 0x13
 1902 0127 02       		.uleb128 0x2
 1903 0128 17       		.uleb128 0x17
 1904 0129 00       		.byte	0
 1905 012a 00       		.byte	0
 1906 012b 15       		.uleb128 0x15
 1907 012c 2E       		.uleb128 0x2e
 1908 012d 01       		.byte	0x1
 1909 012e 3F       		.uleb128 0x3f
 1910 012f 19       		.uleb128 0x19
 1911 0130 03       		.uleb128 0x3
 1912 0131 0E       		.uleb128 0xe
 1913 0132 3A       		.uleb128 0x3a
 1914 0133 0B       		.uleb128 0xb
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 51


 1915 0134 3B       		.uleb128 0x3b
 1916 0135 05       		.uleb128 0x5
 1917 0136 27       		.uleb128 0x27
 1918 0137 19       		.uleb128 0x19
 1919 0138 11       		.uleb128 0x11
 1920 0139 01       		.uleb128 0x1
 1921 013a 12       		.uleb128 0x12
 1922 013b 06       		.uleb128 0x6
 1923 013c 40       		.uleb128 0x40
 1924 013d 18       		.uleb128 0x18
 1925 013e 9742     		.uleb128 0x2117
 1926 0140 19       		.uleb128 0x19
 1927 0141 01       		.uleb128 0x1
 1928 0142 13       		.uleb128 0x13
 1929 0143 00       		.byte	0
 1930 0144 00       		.byte	0
 1931 0145 16       		.uleb128 0x16
 1932 0146 2E       		.uleb128 0x2e
 1933 0147 01       		.byte	0x1
 1934 0148 3F       		.uleb128 0x3f
 1935 0149 19       		.uleb128 0x19
 1936 014a 03       		.uleb128 0x3
 1937 014b 0E       		.uleb128 0xe
 1938 014c 3A       		.uleb128 0x3a
 1939 014d 0B       		.uleb128 0xb
 1940 014e 3B       		.uleb128 0x3b
 1941 014f 05       		.uleb128 0x5
 1942 0150 27       		.uleb128 0x27
 1943 0151 19       		.uleb128 0x19
 1944 0152 49       		.uleb128 0x49
 1945 0153 13       		.uleb128 0x13
 1946 0154 11       		.uleb128 0x11
 1947 0155 01       		.uleb128 0x1
 1948 0156 12       		.uleb128 0x12
 1949 0157 06       		.uleb128 0x6
 1950 0158 40       		.uleb128 0x40
 1951 0159 18       		.uleb128 0x18
 1952 015a 9642     		.uleb128 0x2116
 1953 015c 19       		.uleb128 0x19
 1954 015d 01       		.uleb128 0x1
 1955 015e 13       		.uleb128 0x13
 1956 015f 00       		.byte	0
 1957 0160 00       		.byte	0
 1958 0161 17       		.uleb128 0x17
 1959 0162 01       		.uleb128 0x1
 1960 0163 01       		.byte	0x1
 1961 0164 49       		.uleb128 0x49
 1962 0165 13       		.uleb128 0x13
 1963 0166 01       		.uleb128 0x1
 1964 0167 13       		.uleb128 0x13
 1965 0168 00       		.byte	0
 1966 0169 00       		.byte	0
 1967 016a 18       		.uleb128 0x18
 1968 016b 21       		.uleb128 0x21
 1969 016c 00       		.byte	0
 1970 016d 49       		.uleb128 0x49
 1971 016e 13       		.uleb128 0x13
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 52


 1972 016f 2F       		.uleb128 0x2f
 1973 0170 0B       		.uleb128 0xb
 1974 0171 00       		.byte	0
 1975 0172 00       		.byte	0
 1976 0173 19       		.uleb128 0x19
 1977 0174 34       		.uleb128 0x34
 1978 0175 00       		.byte	0
 1979 0176 03       		.uleb128 0x3
 1980 0177 0E       		.uleb128 0xe
 1981 0178 3A       		.uleb128 0x3a
 1982 0179 0B       		.uleb128 0xb
 1983 017a 3B       		.uleb128 0x3b
 1984 017b 0B       		.uleb128 0xb
 1985 017c 49       		.uleb128 0x49
 1986 017d 13       		.uleb128 0x13
 1987 017e 1C       		.uleb128 0x1c
 1988 017f 0A       		.uleb128 0xa
 1989 0180 00       		.byte	0
 1990 0181 00       		.byte	0
 1991 0182 1A       		.uleb128 0x1a
 1992 0183 26       		.uleb128 0x26
 1993 0184 00       		.byte	0
 1994 0185 49       		.uleb128 0x49
 1995 0186 13       		.uleb128 0x13
 1996 0187 00       		.byte	0
 1997 0188 00       		.byte	0
 1998 0189 1B       		.uleb128 0x1b
 1999 018a 34       		.uleb128 0x34
 2000 018b 00       		.byte	0
 2001 018c 03       		.uleb128 0x3
 2002 018d 0E       		.uleb128 0xe
 2003 018e 3A       		.uleb128 0x3a
 2004 018f 0B       		.uleb128 0xb
 2005 0190 3B       		.uleb128 0x3b
 2006 0191 0B       		.uleb128 0xb
 2007 0192 49       		.uleb128 0x49
 2008 0193 13       		.uleb128 0x13
 2009 0194 3F       		.uleb128 0x3f
 2010 0195 19       		.uleb128 0x19
 2011 0196 02       		.uleb128 0x2
 2012 0197 18       		.uleb128 0x18
 2013 0198 00       		.byte	0
 2014 0199 00       		.byte	0
 2015 019a 1C       		.uleb128 0x1c
 2016 019b 2E       		.uleb128 0x2e
 2017 019c 01       		.byte	0x1
 2018 019d 3F       		.uleb128 0x3f
 2019 019e 19       		.uleb128 0x19
 2020 019f 03       		.uleb128 0x3
 2021 01a0 0E       		.uleb128 0xe
 2022 01a1 3A       		.uleb128 0x3a
 2023 01a2 0B       		.uleb128 0xb
 2024 01a3 3B       		.uleb128 0x3b
 2025 01a4 0B       		.uleb128 0xb
 2026 01a5 27       		.uleb128 0x27
 2027 01a6 19       		.uleb128 0x19
 2028 01a7 3C       		.uleb128 0x3c
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 53


 2029 01a8 19       		.uleb128 0x19
 2030 01a9 01       		.uleb128 0x1
 2031 01aa 13       		.uleb128 0x13
 2032 01ab 00       		.byte	0
 2033 01ac 00       		.byte	0
 2034 01ad 1D       		.uleb128 0x1d
 2035 01ae 05       		.uleb128 0x5
 2036 01af 00       		.byte	0
 2037 01b0 49       		.uleb128 0x49
 2038 01b1 13       		.uleb128 0x13
 2039 01b2 00       		.byte	0
 2040 01b3 00       		.byte	0
 2041 01b4 1E       		.uleb128 0x1e
 2042 01b5 2E       		.uleb128 0x2e
 2043 01b6 01       		.byte	0x1
 2044 01b7 3F       		.uleb128 0x3f
 2045 01b8 19       		.uleb128 0x19
 2046 01b9 03       		.uleb128 0x3
 2047 01ba 0E       		.uleb128 0xe
 2048 01bb 3A       		.uleb128 0x3a
 2049 01bc 0B       		.uleb128 0xb
 2050 01bd 3B       		.uleb128 0x3b
 2051 01be 0B       		.uleb128 0xb
 2052 01bf 27       		.uleb128 0x27
 2053 01c0 19       		.uleb128 0x19
 2054 01c1 49       		.uleb128 0x49
 2055 01c2 13       		.uleb128 0x13
 2056 01c3 3C       		.uleb128 0x3c
 2057 01c4 19       		.uleb128 0x19
 2058 01c5 01       		.uleb128 0x1
 2059 01c6 13       		.uleb128 0x13
 2060 01c7 00       		.byte	0
 2061 01c8 00       		.byte	0
 2062 01c9 1F       		.uleb128 0x1f
 2063 01ca 2E       		.uleb128 0x2e
 2064 01cb 01       		.byte	0x1
 2065 01cc 3F       		.uleb128 0x3f
 2066 01cd 19       		.uleb128 0x19
 2067 01ce 03       		.uleb128 0x3
 2068 01cf 0E       		.uleb128 0xe
 2069 01d0 3A       		.uleb128 0x3a
 2070 01d1 0B       		.uleb128 0xb
 2071 01d2 3B       		.uleb128 0x3b
 2072 01d3 0B       		.uleb128 0xb
 2073 01d4 27       		.uleb128 0x27
 2074 01d5 19       		.uleb128 0x19
 2075 01d6 3C       		.uleb128 0x3c
 2076 01d7 19       		.uleb128 0x19
 2077 01d8 00       		.byte	0
 2078 01d9 00       		.byte	0
 2079 01da 00       		.byte	0
 2080              		.section	.debug_loc,"",%progbits
 2081              	.Ldebug_loc0:
 2082              	.LLST0:
 2083 0000 7A000000 		.4byte	.LVL5
 2084 0004 88000000 		.4byte	.LVL7
 2085 0008 0200     		.2byte	0x2
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 54


 2086 000a 30       		.byte	0x30
 2087 000b 9F       		.byte	0x9f
 2088 000c 88000000 		.4byte	.LVL7
 2089 0010 8A000000 		.4byte	.LVL8
 2090 0014 0200     		.2byte	0x2
 2091 0016 31       		.byte	0x31
 2092 0017 9F       		.byte	0x9f
 2093 0018 00000000 		.4byte	0
 2094 001c 00000000 		.4byte	0
 2095              	.LLST1:
 2096 0020 70000000 		.4byte	.LVL2
 2097 0024 72000000 		.4byte	.LVL3
 2098 0028 0100     		.2byte	0x1
 2099 002a 50       		.byte	0x50
 2100 002b 72000000 		.4byte	.LVL3
 2101 002f 7A000000 		.4byte	.LVL5
 2102 0033 0100     		.2byte	0x1
 2103 0035 53       		.byte	0x53
 2104 0036 7A000000 		.4byte	.LVL5
 2105 003a 8A000000 		.4byte	.LVL8
 2106 003e 0200     		.2byte	0x2
 2107 0040 30       		.byte	0x30
 2108 0041 9F       		.byte	0x9f
 2109 0042 00000000 		.4byte	0
 2110 0046 00000000 		.4byte	0
 2111              	.LLST2:
 2112 004a 7E000000 		.4byte	.LVL6
 2113 004e 8A000000 		.4byte	.LVL8
 2114 0052 0400     		.2byte	0x4
 2115 0054 0A       		.byte	0xa
 2116 0055 0010     		.2byte	0x1000
 2117 0057 9F       		.byte	0x9f
 2118 0058 00000000 		.4byte	0
 2119 005c 00000000 		.4byte	0
 2120              	.LLST3:
 2121 0060 00000000 		.4byte	.LVL12
 2122 0064 0E000000 		.4byte	.LVL13
 2123 0068 0100     		.2byte	0x1
 2124 006a 50       		.byte	0x50
 2125 006b 0E000000 		.4byte	.LVL13
 2126 006f 2C000000 		.4byte	.LFE6
 2127 0073 0400     		.2byte	0x4
 2128 0075 F3       		.byte	0xf3
 2129 0076 01       		.uleb128 0x1
 2130 0077 50       		.byte	0x50
 2131 0078 9F       		.byte	0x9f
 2132 0079 00000000 		.4byte	0
 2133 007d 00000000 		.4byte	0
 2134              	.LLST4:
 2135 0081 00000000 		.4byte	.LVL12
 2136 0085 10000000 		.4byte	.LVL14
 2137 0089 0200     		.2byte	0x2
 2138 008b 30       		.byte	0x30
 2139 008c 9F       		.byte	0x9f
 2140 008d 10000000 		.4byte	.LVL14
 2141 0091 14000000 		.4byte	.LVL15
 2142 0095 0100     		.2byte	0x1
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 55


 2143 0097 53       		.byte	0x53
 2144 0098 18000000 		.4byte	.LVL16
 2145 009c 1E000000 		.4byte	.LVL17
 2146 00a0 0100     		.2byte	0x1
 2147 00a2 53       		.byte	0x53
 2148 00a3 00000000 		.4byte	0
 2149 00a7 00000000 		.4byte	0
 2150              	.LLST5:
 2151 00ab 00000000 		.4byte	.LVL19
 2152 00af 0A000000 		.4byte	.LVL20
 2153 00b3 0100     		.2byte	0x1
 2154 00b5 50       		.byte	0x50
 2155 00b6 0A000000 		.4byte	.LVL20
 2156 00ba 10000000 		.4byte	.LVL22
 2157 00be 0400     		.2byte	0x4
 2158 00c0 F3       		.byte	0xf3
 2159 00c1 01       		.uleb128 0x1
 2160 00c2 50       		.byte	0x50
 2161 00c3 9F       		.byte	0x9f
 2162 00c4 10000000 		.4byte	.LVL22
 2163 00c8 12000000 		.4byte	.LVL23
 2164 00cc 0100     		.2byte	0x1
 2165 00ce 50       		.byte	0x50
 2166 00cf 12000000 		.4byte	.LVL23
 2167 00d3 20000000 		.4byte	.LFE7
 2168 00d7 0400     		.2byte	0x4
 2169 00d9 F3       		.byte	0xf3
 2170 00da 01       		.uleb128 0x1
 2171 00db 50       		.byte	0x50
 2172 00dc 9F       		.byte	0x9f
 2173 00dd 00000000 		.4byte	0
 2174 00e1 00000000 		.4byte	0
 2175              	.LLST6:
 2176 00e5 0A000000 		.4byte	.LVL20
 2177 00e9 0C000000 		.4byte	.LVL21
 2178 00ed 0700     		.2byte	0x7
 2179 00ef 70       		.byte	0x70
 2180 00f0 00       		.sleb128 0
 2181 00f1 0A       		.byte	0xa
 2182 00f2 FFFF     		.2byte	0xffff
 2183 00f4 1A       		.byte	0x1a
 2184 00f5 9F       		.byte	0x9f
 2185 00f6 00000000 		.4byte	0
 2186 00fa 00000000 		.4byte	0
 2187              	.LLST7:
 2188 00fe 00000000 		.4byte	.LVL25
 2189 0102 04000000 		.4byte	.LVL26
 2190 0106 0100     		.2byte	0x1
 2191 0108 50       		.byte	0x50
 2192 0109 04000000 		.4byte	.LVL26
 2193 010d 10000000 		.4byte	.LFE8
 2194 0111 0400     		.2byte	0x4
 2195 0113 F3       		.byte	0xf3
 2196 0114 01       		.uleb128 0x1
 2197 0115 50       		.byte	0x50
 2198 0116 9F       		.byte	0x9f
 2199 0117 00000000 		.4byte	0
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 56


 2200 011b 00000000 		.4byte	0
 2201              	.LLST8:
 2202 011f 00000000 		.4byte	.LVL27
 2203 0123 04000000 		.4byte	.LVL28
 2204 0127 0100     		.2byte	0x1
 2205 0129 50       		.byte	0x50
 2206 012a 04000000 		.4byte	.LVL28
 2207 012e 1C000000 		.4byte	.LFE9
 2208 0132 0400     		.2byte	0x4
 2209 0134 F3       		.byte	0xf3
 2210 0135 01       		.uleb128 0x1
 2211 0136 50       		.byte	0x50
 2212 0137 9F       		.byte	0x9f
 2213 0138 00000000 		.4byte	0
 2214 013c 00000000 		.4byte	0
 2215              	.LLST9:
 2216 0140 00000000 		.4byte	.LVL29
 2217 0144 04000000 		.4byte	.LVL30
 2218 0148 0100     		.2byte	0x1
 2219 014a 50       		.byte	0x50
 2220 014b 04000000 		.4byte	.LVL30
 2221 014f 18000000 		.4byte	.LFE10
 2222 0153 0400     		.2byte	0x4
 2223 0155 F3       		.byte	0xf3
 2224 0156 01       		.uleb128 0x1
 2225 0157 50       		.byte	0x50
 2226 0158 9F       		.byte	0x9f
 2227 0159 00000000 		.4byte	0
 2228 015d 00000000 		.4byte	0
 2229              	.LLST10:
 2230 0161 00000000 		.4byte	.LVL31
 2231 0165 04000000 		.4byte	.LVL32
 2232 0169 0100     		.2byte	0x1
 2233 016b 50       		.byte	0x50
 2234 016c 04000000 		.4byte	.LVL32
 2235 0170 10000000 		.4byte	.LFE11
 2236 0174 0400     		.2byte	0x4
 2237 0176 F3       		.byte	0xf3
 2238 0177 01       		.uleb128 0x1
 2239 0178 50       		.byte	0x50
 2240 0179 9F       		.byte	0x9f
 2241 017a 00000000 		.4byte	0
 2242 017e 00000000 		.4byte	0
 2243              	.LLST11:
 2244 0182 00000000 		.4byte	.LVL33
 2245 0186 04000000 		.4byte	.LVL34
 2246 018a 0100     		.2byte	0x1
 2247 018c 50       		.byte	0x50
 2248 018d 04000000 		.4byte	.LVL34
 2249 0191 10000000 		.4byte	.LFE12
 2250 0195 0400     		.2byte	0x4
 2251 0197 F3       		.byte	0xf3
 2252 0198 01       		.uleb128 0x1
 2253 0199 50       		.byte	0x50
 2254 019a 9F       		.byte	0x9f
 2255 019b 00000000 		.4byte	0
 2256 019f 00000000 		.4byte	0
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 57


 2257              	.LLST12:
 2258 01a3 00000000 		.4byte	.LVL35
 2259 01a7 0C000000 		.4byte	.LVL36
 2260 01ab 0100     		.2byte	0x1
 2261 01ad 50       		.byte	0x50
 2262 01ae 0C000000 		.4byte	.LVL36
 2263 01b2 14000000 		.4byte	.LVL38
 2264 01b6 0100     		.2byte	0x1
 2265 01b8 54       		.byte	0x54
 2266 01b9 14000000 		.4byte	.LVL38
 2267 01bd 1C000000 		.4byte	.LFE13
 2268 01c1 0400     		.2byte	0x4
 2269 01c3 F3       		.byte	0xf3
 2270 01c4 01       		.uleb128 0x1
 2271 01c5 50       		.byte	0x50
 2272 01c6 9F       		.byte	0x9f
 2273 01c7 00000000 		.4byte	0
 2274 01cb 00000000 		.4byte	0
 2275              	.LLST13:
 2276 01cf 00000000 		.4byte	.LVL35
 2277 01d3 0F000000 		.4byte	.LVL37-1
 2278 01d7 0100     		.2byte	0x1
 2279 01d9 51       		.byte	0x51
 2280 01da 0F000000 		.4byte	.LVL37-1
 2281 01de 1C000000 		.4byte	.LFE13
 2282 01e2 0400     		.2byte	0x4
 2283 01e4 F3       		.byte	0xf3
 2284 01e5 01       		.uleb128 0x1
 2285 01e6 51       		.byte	0x51
 2286 01e7 9F       		.byte	0x9f
 2287 01e8 00000000 		.4byte	0
 2288 01ec 00000000 		.4byte	0
 2289              	.LLST14:
 2290 01f0 00000000 		.4byte	.LVL39
 2291 01f4 0C000000 		.4byte	.LVL40
 2292 01f8 0100     		.2byte	0x1
 2293 01fa 50       		.byte	0x50
 2294 01fb 0C000000 		.4byte	.LVL40
 2295 01ff 14000000 		.4byte	.LVL42
 2296 0203 0100     		.2byte	0x1
 2297 0205 54       		.byte	0x54
 2298 0206 14000000 		.4byte	.LVL42
 2299 020a 1C000000 		.4byte	.LFE14
 2300 020e 0400     		.2byte	0x4
 2301 0210 F3       		.byte	0xf3
 2302 0211 01       		.uleb128 0x1
 2303 0212 50       		.byte	0x50
 2304 0213 9F       		.byte	0x9f
 2305 0214 00000000 		.4byte	0
 2306 0218 00000000 		.4byte	0
 2307              	.LLST15:
 2308 021c 00000000 		.4byte	.LVL39
 2309 0220 0F000000 		.4byte	.LVL41-1
 2310 0224 0100     		.2byte	0x1
 2311 0226 51       		.byte	0x51
 2312 0227 0F000000 		.4byte	.LVL41-1
 2313 022b 16000000 		.4byte	.LVL43
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 58


 2314 022f 0100     		.2byte	0x1
 2315 0231 55       		.byte	0x55
 2316 0232 16000000 		.4byte	.LVL43
 2317 0236 1C000000 		.4byte	.LFE14
 2318 023a 0800     		.2byte	0x8
 2319 023c F3       		.byte	0xf3
 2320 023d 01       		.uleb128 0x1
 2321 023e 50       		.byte	0x50
 2322 023f 32       		.byte	0x32
 2323 0240 24       		.byte	0x24
 2324 0241 73       		.byte	0x73
 2325 0242 00       		.sleb128 0
 2326 0243 22       		.byte	0x22
 2327 0244 00000000 		.4byte	0
 2328 0248 00000000 		.4byte	0
 2329              	.LLST16:
 2330 024c 00000000 		.4byte	.LVL44
 2331 0250 0A000000 		.4byte	.LVL45
 2332 0254 0100     		.2byte	0x1
 2333 0256 50       		.byte	0x50
 2334 0257 0A000000 		.4byte	.LVL45
 2335 025b 1A000000 		.4byte	.LVL47
 2336 025f 0100     		.2byte	0x1
 2337 0261 55       		.byte	0x55
 2338 0262 1A000000 		.4byte	.LVL47
 2339 0266 3E000000 		.4byte	.LVL54
 2340 026a 0400     		.2byte	0x4
 2341 026c F3       		.byte	0xf3
 2342 026d 01       		.uleb128 0x1
 2343 026e 50       		.byte	0x50
 2344 026f 9F       		.byte	0x9f
 2345 0270 3E000000 		.4byte	.LVL54
 2346 0274 40000000 		.4byte	.LVL55
 2347 0278 0100     		.2byte	0x1
 2348 027a 50       		.byte	0x50
 2349 027b 40000000 		.4byte	.LVL55
 2350 027f 54000000 		.4byte	.LFE15
 2351 0283 0100     		.2byte	0x1
 2352 0285 55       		.byte	0x55
 2353 0286 00000000 		.4byte	0
 2354 028a 00000000 		.4byte	0
 2355              	.LLST17:
 2356 028e 00000000 		.4byte	.LVL44
 2357 0292 0A000000 		.4byte	.LVL45
 2358 0296 0100     		.2byte	0x1
 2359 0298 51       		.byte	0x51
 2360 0299 0A000000 		.4byte	.LVL45
 2361 029d 18000000 		.4byte	.LVL46
 2362 02a1 0400     		.2byte	0x4
 2363 02a3 F3       		.byte	0xf3
 2364 02a4 01       		.uleb128 0x1
 2365 02a5 51       		.byte	0x51
 2366 02a6 9F       		.byte	0x9f
 2367 02a7 18000000 		.4byte	.LVL46
 2368 02ab 24000000 		.4byte	.LVL48
 2369 02af 0100     		.2byte	0x1
 2370 02b1 51       		.byte	0x51
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 59


 2371 02b2 34000000 		.4byte	.LVL52
 2372 02b6 36000000 		.4byte	.LVL53
 2373 02ba 0100     		.2byte	0x1
 2374 02bc 51       		.byte	0x51
 2375 02bd 3E000000 		.4byte	.LVL54
 2376 02c1 43000000 		.4byte	.LVL56-1
 2377 02c5 0100     		.2byte	0x1
 2378 02c7 51       		.byte	0x51
 2379 02c8 43000000 		.4byte	.LVL56-1
 2380 02cc 54000000 		.4byte	.LFE15
 2381 02d0 0400     		.2byte	0x4
 2382 02d2 F3       		.byte	0xf3
 2383 02d3 01       		.uleb128 0x1
 2384 02d4 51       		.byte	0x51
 2385 02d5 9F       		.byte	0x9f
 2386 02d6 00000000 		.4byte	0
 2387 02da 00000000 		.4byte	0
 2388              	.LLST18:
 2389 02de 2A000000 		.4byte	.LVL49
 2390 02e2 2C000000 		.4byte	.LVL50
 2391 02e6 0900     		.2byte	0x9
 2392 02e8 70       		.byte	0x70
 2393 02e9 00       		.sleb128 0
 2394 02ea 73       		.byte	0x73
 2395 02eb 00       		.sleb128 0
 2396 02ec 22       		.byte	0x22
 2397 02ed 71       		.byte	0x71
 2398 02ee 00       		.sleb128 0
 2399 02ef 1B       		.byte	0x1b
 2400 02f0 9F       		.byte	0x9f
 2401 02f1 00000000 		.4byte	0
 2402 02f5 00000000 		.4byte	0
 2403              	.LLST19:
 2404 02f9 00000000 		.4byte	.LVL57
 2405 02fd 0C000000 		.4byte	.LVL58
 2406 0301 0100     		.2byte	0x1
 2407 0303 50       		.byte	0x50
 2408 0304 0C000000 		.4byte	.LVL58
 2409 0308 1C000000 		.4byte	.LVL61
 2410 030c 0100     		.2byte	0x1
 2411 030e 55       		.byte	0x55
 2412 030f 1C000000 		.4byte	.LVL61
 2413 0313 40000000 		.4byte	.LFE16
 2414 0317 0400     		.2byte	0x4
 2415 0319 F3       		.byte	0xf3
 2416 031a 01       		.uleb128 0x1
 2417 031b 50       		.byte	0x50
 2418 031c 9F       		.byte	0x9f
 2419 031d 00000000 		.4byte	0
 2420 0321 00000000 		.4byte	0
 2421              	.LLST20:
 2422 0325 00000000 		.4byte	.LVL57
 2423 0329 0F000000 		.4byte	.LVL59-1
 2424 032d 0100     		.2byte	0x1
 2425 032f 51       		.byte	0x51
 2426 0330 0F000000 		.4byte	.LVL59-1
 2427 0334 1A000000 		.4byte	.LVL60
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 60


 2428 0338 0400     		.2byte	0x4
 2429 033a F3       		.byte	0xf3
 2430 033b 01       		.uleb128 0x1
 2431 033c 51       		.byte	0x51
 2432 033d 9F       		.byte	0x9f
 2433 033e 1A000000 		.4byte	.LVL60
 2434 0342 32000000 		.4byte	.LVL65
 2435 0346 0100     		.2byte	0x1
 2436 0348 54       		.byte	0x54
 2437 0349 00000000 		.4byte	0
 2438 034d 00000000 		.4byte	0
 2439              	.LLST21:
 2440 0351 1E000000 		.4byte	.LVL62
 2441 0355 32000000 		.4byte	.LVL65
 2442 0359 1A00     		.2byte	0x1a
 2443 035b 74       		.byte	0x74
 2444 035c 00       		.sleb128 0
 2445 035d F7       		.byte	0xf7
 2446 035e 41       		.uleb128 0x41
 2447 035f F7       		.byte	0xf7
 2448 0360 25       		.uleb128 0x25
 2449 0361 0C       		.byte	0xc
 2450 0362 80969800 		.4byte	0x989680
 2451 0366 F7       		.byte	0xf7
 2452 0367 25       		.uleb128 0x25
 2453 0368 1E       		.byte	0x1e
 2454 0369 F7       		.byte	0xf7
 2455 036a 33       		.uleb128 0x33
 2456 036b 75       		.byte	0x75
 2457 036c 00       		.sleb128 0
 2458 036d F7       		.byte	0xf7
 2459 036e 3A       		.uleb128 0x3a
 2460 036f F7       		.byte	0xf7
 2461 0370 33       		.uleb128 0x33
 2462 0371 1B       		.byte	0x1b
 2463 0372 F7       		.byte	0xf7
 2464 0373 25       		.uleb128 0x25
 2465 0374 9F       		.byte	0x9f
 2466 0375 00000000 		.4byte	0
 2467 0379 00000000 		.4byte	0
 2468              	.LLST22:
 2469 037d 00000000 		.4byte	.LVL66
 2470 0381 0C000000 		.4byte	.LVL67
 2471 0385 0100     		.2byte	0x1
 2472 0387 50       		.byte	0x50
 2473 0388 0C000000 		.4byte	.LVL67
 2474 038c 1E000000 		.4byte	.LVL70
 2475 0390 0100     		.2byte	0x1
 2476 0392 55       		.byte	0x55
 2477 0393 1E000000 		.4byte	.LVL70
 2478 0397 48000000 		.4byte	.LFE17
 2479 039b 0400     		.2byte	0x4
 2480 039d F3       		.byte	0xf3
 2481 039e 01       		.uleb128 0x1
 2482 039f 50       		.byte	0x50
 2483 03a0 9F       		.byte	0x9f
 2484 03a1 00000000 		.4byte	0
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 61


 2485 03a5 00000000 		.4byte	0
 2486              	.LLST23:
 2487 03a9 00000000 		.4byte	.LVL66
 2488 03ad 0F000000 		.4byte	.LVL68-1
 2489 03b1 0100     		.2byte	0x1
 2490 03b3 51       		.byte	0x51
 2491 03b4 0F000000 		.4byte	.LVL68-1
 2492 03b8 1A000000 		.4byte	.LVL69
 2493 03bc 0400     		.2byte	0x4
 2494 03be F3       		.byte	0xf3
 2495 03bf 01       		.uleb128 0x1
 2496 03c0 51       		.byte	0x51
 2497 03c1 9F       		.byte	0x9f
 2498 03c2 1A000000 		.4byte	.LVL69
 2499 03c6 2C000000 		.4byte	.LVL74
 2500 03ca 0100     		.2byte	0x1
 2501 03cc 54       		.byte	0x54
 2502 03cd 00000000 		.4byte	0
 2503 03d1 00000000 		.4byte	0
 2504              	.LLST24:
 2505 03d5 20000000 		.4byte	.LVL71
 2506 03d9 2C000000 		.4byte	.LVL74
 2507 03dd 1600     		.2byte	0x16
 2508 03df 74       		.byte	0x74
 2509 03e0 00       		.sleb128 0
 2510 03e1 F7       		.byte	0xf7
 2511 03e2 41       		.uleb128 0x41
 2512 03e3 F7       		.byte	0xf7
 2513 03e4 2C       		.uleb128 0x2c
 2514 03e5 F4       		.byte	0xf4
 2515 03e6 2C       		.uleb128 0x2c
 2516 03e7 04       		.byte	0x4
 2517 03e8 00002041 		.4byte	0x41200000
 2518 03ec 1E       		.byte	0x1e
 2519 03ed 75       		.byte	0x75
 2520 03ee 00       		.sleb128 0
 2521 03ef F7       		.byte	0xf7
 2522 03f0 3A       		.uleb128 0x3a
 2523 03f1 F7       		.byte	0xf7
 2524 03f2 2C       		.uleb128 0x2c
 2525 03f3 1B       		.byte	0x1b
 2526 03f4 9F       		.byte	0x9f
 2527 03f5 00000000 		.4byte	0
 2528 03f9 00000000 		.4byte	0
 2529              		.section	.debug_aranges,"",%progbits
 2530 0000 A4000000 		.4byte	0xa4
 2531 0004 0200     		.2byte	0x2
 2532 0006 00000000 		.4byte	.Ldebug_info0
 2533 000a 04       		.byte	0x4
 2534 000b 00       		.byte	0
 2535 000c 0000     		.2byte	0
 2536 000e 0000     		.2byte	0
 2537 0010 00000000 		.4byte	.LFB1
 2538 0014 F4000000 		.4byte	.LFE1-.LFB1
 2539 0018 00000000 		.4byte	.LFB0
 2540 001c 38000000 		.4byte	.LFE0-.LFB0
 2541 0020 00000000 		.4byte	.LFB2
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 62


 2542 0024 20000000 		.4byte	.LFE2-.LFB2
 2543 0028 00000000 		.4byte	.LFB3
 2544 002c 10000000 		.4byte	.LFE3-.LFB3
 2545 0030 00000000 		.4byte	.LFB4
 2546 0034 0C000000 		.4byte	.LFE4-.LFB4
 2547 0038 00000000 		.4byte	.LFB5
 2548 003c 02000000 		.4byte	.LFE5-.LFB5
 2549 0040 00000000 		.4byte	.LFB6
 2550 0044 2C000000 		.4byte	.LFE6-.LFB6
 2551 0048 00000000 		.4byte	.LFB7
 2552 004c 20000000 		.4byte	.LFE7-.LFB7
 2553 0050 00000000 		.4byte	.LFB8
 2554 0054 10000000 		.4byte	.LFE8-.LFB8
 2555 0058 00000000 		.4byte	.LFB9
 2556 005c 1C000000 		.4byte	.LFE9-.LFB9
 2557 0060 00000000 		.4byte	.LFB10
 2558 0064 18000000 		.4byte	.LFE10-.LFB10
 2559 0068 00000000 		.4byte	.LFB11
 2560 006c 10000000 		.4byte	.LFE11-.LFB11
 2561 0070 00000000 		.4byte	.LFB12
 2562 0074 10000000 		.4byte	.LFE12-.LFB12
 2563 0078 00000000 		.4byte	.LFB13
 2564 007c 1C000000 		.4byte	.LFE13-.LFB13
 2565 0080 00000000 		.4byte	.LFB14
 2566 0084 1C000000 		.4byte	.LFE14-.LFB14
 2567 0088 00000000 		.4byte	.LFB15
 2568 008c 54000000 		.4byte	.LFE15-.LFB15
 2569 0090 00000000 		.4byte	.LFB16
 2570 0094 40000000 		.4byte	.LFE16-.LFB16
 2571 0098 00000000 		.4byte	.LFB17
 2572 009c 48000000 		.4byte	.LFE17-.LFB17
 2573 00a0 00000000 		.4byte	0
 2574 00a4 00000000 		.4byte	0
 2575              		.section	.debug_ranges,"",%progbits
 2576              	.Ldebug_ranges0:
 2577 0000 00000000 		.4byte	.LFB1
 2578 0004 F4000000 		.4byte	.LFE1
 2579 0008 00000000 		.4byte	.LFB0
 2580 000c 38000000 		.4byte	.LFE0
 2581 0010 00000000 		.4byte	.LFB2
 2582 0014 20000000 		.4byte	.LFE2
 2583 0018 00000000 		.4byte	.LFB3
 2584 001c 10000000 		.4byte	.LFE3
 2585 0020 00000000 		.4byte	.LFB4
 2586 0024 0C000000 		.4byte	.LFE4
 2587 0028 00000000 		.4byte	.LFB5
 2588 002c 02000000 		.4byte	.LFE5
 2589 0030 00000000 		.4byte	.LFB6
 2590 0034 2C000000 		.4byte	.LFE6
 2591 0038 00000000 		.4byte	.LFB7
 2592 003c 20000000 		.4byte	.LFE7
 2593 0040 00000000 		.4byte	.LFB8
 2594 0044 10000000 		.4byte	.LFE8
 2595 0048 00000000 		.4byte	.LFB9
 2596 004c 1C000000 		.4byte	.LFE9
 2597 0050 00000000 		.4byte	.LFB10
 2598 0054 18000000 		.4byte	.LFE10
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 63


 2599 0058 00000000 		.4byte	.LFB11
 2600 005c 10000000 		.4byte	.LFE11
 2601 0060 00000000 		.4byte	.LFB12
 2602 0064 10000000 		.4byte	.LFE12
 2603 0068 00000000 		.4byte	.LFB13
 2604 006c 1C000000 		.4byte	.LFE13
 2605 0070 00000000 		.4byte	.LFB14
 2606 0074 1C000000 		.4byte	.LFE14
 2607 0078 00000000 		.4byte	.LFB15
 2608 007c 54000000 		.4byte	.LFE15
 2609 0080 00000000 		.4byte	.LFB16
 2610 0084 40000000 		.4byte	.LFE16
 2611 0088 00000000 		.4byte	.LFB17
 2612 008c 48000000 		.4byte	.LFE17
 2613 0090 00000000 		.4byte	0
 2614 0094 00000000 		.4byte	0
 2615              		.section	.debug_line,"",%progbits
 2616              	.Ldebug_line0:
 2617 0000 E9020000 		.section	.debug_str,"MS",%progbits,1
 2617      02004B00 
 2617      00000201 
 2617      FB0E0D00 
 2617      01010101 
 2618              	.LASF11:
 2619 0000 75696E74 		.ascii	"uint16\000"
 2619      313600
 2620              	.LASF47:
 2621 0007 61646347 		.ascii	"adcGain\000"
 2621      61696E00 
 2622              	.LASF24:
 2623 000f 636F756E 		.ascii	"counts\000"
 2623      747300
 2624              	.LASF53:
 2625 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2625      436F756E 
 2625      7473546F 
 2625      5F566F6C 
 2625      747300
 2626              	.LASF25:
 2627 0029 4144435F 		.ascii	"ADC_Init\000"
 2627      496E6974 
 2627      00
 2628              	.LASF0:
 2629 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2629      206C6F6E 
 2629      6720756E 
 2629      7369676E 
 2629      65642069 
 2630              	.LASF28:
 2631 0049 4144435F 		.ascii	"ADC_StartConvert\000"
 2631      53746172 
 2631      74436F6E 
 2631      76657274 
 2631      00
 2632              	.LASF2:
 2633 005a 6C6F6E67 		.ascii	"long long int\000"
 2633      206C6F6E 
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 64


 2633      6720696E 
 2633      7400
 2634              	.LASF4:
 2635 0068 7369676E 		.ascii	"signed char\000"
 2635      65642063 
 2635      68617200 
 2636              	.LASF30:
 2637 0074 73746174 		.ascii	"status\000"
 2637      757300
 2638              	.LASF14:
 2639 007b 696E7433 		.ascii	"int32\000"
 2639      3200
 2640              	.LASF26:
 2641 0081 4144435F 		.ascii	"ADC_Start\000"
 2641      53746172 
 2641      7400
 2642              	.LASF7:
 2643 008b 6C6F6E67 		.ascii	"long int\000"
 2643      20696E74 
 2643      00
 2644              	.LASF51:
 2645 0094 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2645      436F756E 
 2645      7473546F 
 2645      5F75566F 
 2645      6C747300 
 2646              	.LASF58:
 2647 00a8 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2647      636F756E 
 2647      74735065 
 2647      72313056 
 2647      6F6C7400 
 2648              	.LASF10:
 2649 00bc 75696E74 		.ascii	"uint8\000"
 2649      3800
 2650              	.LASF60:
 2651 00c2 43794465 		.ascii	"CyDelayUs\000"
 2651      6C617955 
 2651      7300
 2652              	.LASF16:
 2653 00cc 646F7562 		.ascii	"double\000"
 2653      6C6500
 2654              	.LASF12:
 2655 00d3 75696E74 		.ascii	"uint32\000"
 2655      333200
 2656              	.LASF37:
 2657 00da 6D61736B 		.ascii	"mask\000"
 2657      00
 2658              	.LASF56:
 2659 00df 4144435F 		.ascii	"ADC_initVar\000"
 2659      696E6974 
 2659      56617200 
 2660              	.LASF33:
 2661 00eb 7265744D 		.ascii	"retMode\000"
 2661      6F646500 
 2662              	.LASF42:
 2663 00f3 4144435F 		.ascii	"ADC_SetLimitMask\000"
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 65


 2663      5365744C 
 2663      696D6974 
 2663      4D61736B 
 2663      00
 2664              	.LASF9:
 2665 0104 756E7369 		.ascii	"unsigned int\000"
 2665      676E6564 
 2665      20696E74 
 2665      00
 2666              	.LASF52:
 2667 0111 75566F6C 		.ascii	"uVolts\000"
 2667      747300
 2668              	.LASF8:
 2669 0118 6C6F6E67 		.ascii	"long unsigned int\000"
 2669      20756E73 
 2669      69676E65 
 2669      6420696E 
 2669      7400
 2670              	.LASF43:
 2671 012a 4144435F 		.ascii	"ADC_SetSatMask\000"
 2671      53657453 
 2671      61744D61 
 2671      736B00
 2672              	.LASF54:
 2673 0139 766F6C74 		.ascii	"volts\000"
 2673      7300
 2674              	.LASF23:
 2675 013f 746D7052 		.ascii	"tmpRegVal\000"
 2675      65675661 
 2675      6C00
 2676              	.LASF6:
 2677 0149 73686F72 		.ascii	"short unsigned int\000"
 2677      7420756E 
 2677      7369676E 
 2677      65642069 
 2677      6E7400
 2678              	.LASF65:
 2679 015c 4379496E 		.ascii	"CyIntSetVector\000"
 2679      74536574 
 2679      56656374 
 2679      6F7200
 2680              	.LASF29:
 2681 016b 4144435F 		.ascii	"ADC_StopConvert\000"
 2681      53746F70 
 2681      436F6E76 
 2681      65727400 
 2682              	.LASF50:
 2683 017b 6D566F6C 		.ascii	"mVolts\000"
 2683      747300
 2684              	.LASF19:
 2685 0182 72656733 		.ascii	"reg32\000"
 2685      3200
 2686              	.LASF15:
 2687 0188 666C6F61 		.ascii	"float32\000"
 2687      74333200 
 2688              	.LASF63:
 2689 0190 433A5C55 		.ascii	"C:\\Users\\Marcus\\Documents\\GitHub\\Tarocco Lite\\"
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 66


 2689      73657273 
 2689      5C4D6172 
 2689      6375735C 
 2689      446F6375 
 2690 01be 4669726D 		.ascii	"Firmware\\dcsd.cydsn\000"
 2690      77617265 
 2690      5C646373 
 2690      642E6379 
 2690      64736E00 
 2691              	.LASF21:
 2692 01d2 73697A65 		.ascii	"sizetype\000"
 2692      74797065 
 2692      00
 2693              	.LASF39:
 2694 01db 6C6F774C 		.ascii	"lowLimit\000"
 2694      696D6974 
 2694      00
 2695              	.LASF40:
 2696 01e4 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2696      53657448 
 2696      6967684C 
 2696      696D6974 
 2696      00
 2697              	.LASF31:
 2698 01f5 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2698      4973456E 
 2698      64436F6E 
 2698      76657273 
 2698      696F6E00 
 2699              	.LASF17:
 2700 0209 696E7436 		.ascii	"int64\000"
 2700      3400
 2701              	.LASF59:
 2702 020f 4379496E 		.ascii	"CyIntSetPriority\000"
 2702      74536574 
 2702      5072696F 
 2702      72697479 
 2702      00
 2703              	.LASF36:
 2704 0220 4144435F 		.ascii	"ADC_SetChanMask\000"
 2704      53657443 
 2704      68616E4D 
 2704      61736B00 
 2705              	.LASF62:
 2706 0230 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC.c\000"
 2706      72617465 
 2706      645F536F 
 2706      75726365 
 2706      5C50536F 
 2707              	.LASF46:
 2708 024d 4144435F 		.ascii	"ADC_SetGain\000"
 2708      53657447 
 2708      61696E00 
 2709              	.LASF1:
 2710 0259 666C6F61 		.ascii	"float\000"
 2710      7400
 2711              	.LASF41:
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 67


 2712 025f 68696768 		.ascii	"highLimit\000"
 2712      4C696D69 
 2712      7400
 2713              	.LASF48:
 2714 0269 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2714      436F756E 
 2714      7473546F 
 2714      5F6D566F 
 2714      6C747300 
 2715              	.LASF38:
 2716 027d 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2716      5365744C 
 2716      6F774C69 
 2716      6D697400 
 2717              	.LASF66:
 2718 028d 43794861 		.ascii	"CyHalt\000"
 2718      6C7400
 2719              	.LASF5:
 2720 0294 756E7369 		.ascii	"unsigned char\000"
 2720      676E6564 
 2720      20636861 
 2720      7200
 2721              	.LASF57:
 2722 02a2 4144435F 		.ascii	"ADC_offset\000"
 2722      6F666673 
 2722      657400
 2723              	.LASF3:
 2724 02ad 73686F72 		.ascii	"short int\000"
 2724      7420696E 
 2724      7400
 2725              	.LASF27:
 2726 02b7 4144435F 		.ascii	"ADC_Stop\000"
 2726      53746F70 
 2726      00
 2727              	.LASF22:
 2728 02c0 63684E75 		.ascii	"chNum\000"
 2728      6D00
 2729              	.LASF34:
 2730 02c6 6368616E 		.ascii	"chan\000"
 2730      00
 2731              	.LASF18:
 2732 02cb 63686172 		.ascii	"char\000"
 2732      00
 2733              	.LASF20:
 2734 02d0 63796973 		.ascii	"cyisraddress\000"
 2734      72616464 
 2734      72657373 
 2734      00
 2735              	.LASF55:
 2736 02dd 4144435F 		.ascii	"ADC_channelsConfig\000"
 2736      6368616E 
 2736      6E656C73 
 2736      436F6E66 
 2736      696700
 2737              	.LASF45:
 2738 02f0 6F666673 		.ascii	"offset\000"
 2738      657400
ARM GAS  C:\Users\Marcus\AppData\Local\Temp\ccJHO0Ni.s 			page 68


 2739              	.LASF49:
 2740 02f7 61646343 		.ascii	"adcCounts\000"
 2740      6F756E74 
 2740      7300
 2741              	.LASF64:
 2742 0301 4144435F 		.ascii	"ADC_Enable\000"
 2742      456E6162 
 2742      6C6500
 2743              	.LASF13:
 2744 030c 696E7431 		.ascii	"int16\000"
 2744      3600
 2745              	.LASF44:
 2746 0312 4144435F 		.ascii	"ADC_SetOffset\000"
 2746      5365744F 
 2746      66667365 
 2746      7400
 2747              	.LASF61:
 2748 0320 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2748      4320342E 
 2748      392E3320 
 2748      32303135 
 2748      30333033 
 2749 0353 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2749      20726576 
 2749      6973696F 
 2749      6E203232 
 2749      31323230 
 2750 0386 32202D73 		.ascii	"2 -std=c99 -ffunction-sections -ffat-lto-objects\000"
 2750      74643D63 
 2750      3939202D 
 2750      6666756E 
 2750      6374696F 
 2751              	.LASF35:
 2752 03b7 72657375 		.ascii	"result\000"
 2752      6C7400
 2753              	.LASF32:
 2754 03be 4144435F 		.ascii	"ADC_GetResult16\000"
 2754      47657452 
 2754      6573756C 
 2754      74313600 
 2755              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
